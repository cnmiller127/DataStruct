{"version":3,"sources":["utils/useWindow.js","components/ArrDraw.js","pages/Array.js","components/TreeDraw.js","utils/treeObj.js","utils/balancedTree.js","pages/Tree.js","components/StackDraw.js","pages/Stack.js","components/QueueDraw.js","pages/Queue.js","utils/sLinkedList.js","pages/LinkedListS.js","components/ListDrawS.js","components/Nav/index.js","App.js","index.js"],"names":["useWindowSize","ArrDraw","props","x","y","w","h","canvasRef","useRef","width","window","innerWidth","height","innerHeight","draw","ctx","fillStyle","i","data","length","beginPath","rect","stroke","font","textAlign","textBaseline","fillText","useEffect","canvas","current","context","getContext","clearRect","className","ref","Array","arrSource","push","Math","floor","random","useState","method","setMethod","arr","setArr","formData","setFormData","index","value","insFormData","setInsFormData","handleChange","e","preventDefault","target","console","log","Button","color","onClick","Form","Label","Input","onChange","type","temp","pop","splice","shift","unshift","TreeDraw","colors","H","W","R","root","counter","treeDraw","subroot","xC","yC","r","arc","PI","fill","val","left","m","c","aQ","pow","bQ","cQ","xQ1","sqrt","xQ2","cQ2","xS","yS","xE","yE","moveTo","lineTo","right","stW","Node","this","freq","bTree","tree","count","leftCount","rightCount","rlc","prototype","insert","rIns","prev","q","nRoot","arRight","p","nodes","rC","parent","leaf","lR","String","arLeft","lC","gL","balance","rS","lS","Tree","treeSrc","setTreeSrc","handleEnterIns","Number","src","onSubmit","StackDraw","opp","Stack","QueueDraw","Queue","next","sLinkedList","list","front","rear","prepend","append","delF","delete","update","ListDrawS","lw","al","arrowAng","cos","sin","listSrc","LinkedListS","setList","handleEnterPrepend","handleChangeI","handleChangeV","handleEnterDelete","handleEnterUpdate","NavEx","collapsed","setCollapsed","Navbar","id","light","NavbarBrand","href","NavbarText","NavbarToggler","Collapse","isOpen","navbar","Nav","NavItem","NavLink","App","exact","path","component","List","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.fb959f15.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nfunction useWindowSize() {\r\n    const [size, setSize] = useState([0,0]);\r\n    const [deviceSize, setDeviceSize] = useState([0,0]);\r\n    useEffect(() => {\r\n      function updateSize() {\r\n          setSize([window.innerWidth, window.innerHeight]);\r\n          setDeviceSize([window.screen.width, window.screen.height]);\r\n        \r\n      }\r\n      window.addEventListener('resize', updateSize);\r\n      updateSize();\r\n      \r\n      return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n  }\r\n\r\n  export default useWindowSize;","import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst ArrDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n        if(width >= 768){\r\n        x = width/300;\r\n        y = height/50;\r\n        w = width/40;\r\n        h = width/40;\r\n        \r\n        }\r\n        else{\r\n        x = 0;\r\n        y = height/50;\r\n        w = width/15;\r\n        h = width/15;\r\n        \r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        for(var i = 0; i < props.data.length; i++) {\r\n            \r\n            ctx.beginPath();\r\n            ctx.rect(x + i*w, y, w, h);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"2.5vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(props.data[i], x + 0.5*w + i*w, y + 0.5*h);\r\n            (width >= 768) ? ctx.font = \"2vh Arial\": ctx.font = \"1.5vh Arial\";\r\n            ctx.fillText(i, x + 0.5*w + i*w, y + 1.3*h);\r\n            \r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        if(width > 996 & height < 996)  {\r\n          canvas.height = window.innerHeight;\r\n          canvas.width = 2*window.innerWidth;\r\n      }\r\n      else if(width >= 768 & height >= 768)  {\r\n          canvas.height = window.innerHeight;\r\n          canvas.width = 2*window.innerWidth;\r\n      }\r\n      else if(width < 996 & height > 996)  {\r\n          canvas.height = window.innerHeight*0.08;\r\n          canvas.width = 2*window.innerWidth;\r\n      }\r\n      else if(width < 540) {\r\n          canvas.height = window.innerHeight*.25;\r\n          canvas.width = 3*window.innerWidth;\r\n      }\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default ArrDraw; ","import React, {useState, useEffect, useRef} from 'react';\r\nimport ArrDraw from '../components/ArrDraw'\r\n//import ArrComps from '../components/arrComps/arrFns';\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\n\r\n\r\nconst Array = () => {\r\n    let arrSource = [];\r\n    for(let i = 0; i < 10; i++) {\r\n        arrSource.push(Math.floor(Math.random() *20));\r\n    }\r\n    const [method, setMethod] = useState(\"push\");\r\n    const [arr, setArr] = useState(arrSource);\r\n    const [formData, setFormData] = useState(\" \");\r\n    const [insFormData, setInsFormData] = useState({index: null, value: null})\r\n    // Menu for selecting method\r\n    const handlePush = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"push\");\r\n    }\r\n    const handlePop = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"pop\");\r\n    }\r\n    const handleInsert = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"insert\");\r\n    }\r\n    const handleDelete = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"delete\");\r\n    }\r\n    const handleShift = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"shift\");\r\n    }\r\n    const handleUnshift = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"unshift\");\r\n    }\r\n    // Methods for array mutation\r\n    //Change for push, unshift\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\" \");\r\n        \r\n    }\r\n    //PUSH \r\n    const handleEnterPush = (e) => {\r\n        e.preventDefault();\r\n        setArr([...arr, formData]);\r\n        setFormData(\"\");\r\n        \r\n    }\r\n    //POP: \r\n    const handleEnterPop = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.pop();\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n    }\r\n    // INSERT: \r\n    const handleChangeI = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, index: e.target.value}) : setInsFormData({...insFormData, index: \" \"});\r\n    }\r\n    const handleChangeV = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, value: e.target.value}) : setInsFormData({...insFormData, value: \" \"});\r\n    }\r\n    const handleEnterIns = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData.index < arr.length && insFormData.value){\r\n            console.log(\"INSHANDLER\");\r\n            let temp = arr;\r\n            temp.splice(insFormData.index,0, insFormData.value);\r\n            console.log(temp);\r\n            setArr([...temp]);\r\n            setFormData(\"\");\r\n        }\r\n    }\r\n    // DELETE\r\n    \r\n    const handleEnterDelete = (e) => {\r\n        e.preventDefault();\r\n        if(formData >= 0 && formData < arr.length){\r\n        let temp = arr;\r\n        temp.splice(formData, 1);\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n        }\r\n    }\r\n    // Shift\r\n    const handleEnterShift = (e) => {\r\n        e.preventDefault();\r\n        if(formData >= 0 && formData < arr.length){\r\n        let temp = arr;\r\n        temp.shift();\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n        }\r\n    }\r\n\r\n    //Unshift\r\n    const handleEnterUnshift = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.unshift(formData);\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n        \r\n    }\r\n\r\n\r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"arr: \", arr);\r\n        console.log(\"insformData\", insFormData);\r\n    },[arr, formData, , insFormData, method])\r\n    \r\n\r\n\r\n    return (\r\n        <div className = \"pt-2 p-1 px-md-5 py-md-3\">\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <h1 className = \"hdr\">ARRAYS</h1>\r\n            </div>\r\n            <ArrDraw data = {arr} />\r\n            <Button color = \"success\" className = \"btn\" onClick = {handlePush}> Push</Button>\r\n            <Button color = \"warning\" className = \"btn\" onClick = {handlePop}> Pop</Button>\r\n            <Button color = \"info\" className = \"btn\" onClick = {handleInsert}> Insert</Button>\r\n            <Button color = \"danger\" className = \"btn\" onClick = {handleDelete}> Delete</Button>\r\n            <Button color = \"secondary\" className = \"btn\" onClick = {handleShift}> Shift</Button>\r\n            <Button color = \"primary\" className = \"btn\" onClick = {handleUnshift}> Unshift</Button>\r\n            {(method === \"push\") && (\r\n            <Form className = \"form\">\r\n                <Label>Value to push: </Label>\r\n                <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterPush}>ENTER</Button>\r\n            </Form>\r\n            )}\r\n            {(method === \"pop\") &&\r\n                <div>\r\n                    <Label className = \"btnLabel m-1\">Press Enter to pop: </Label>\r\n                    <Button className = \"btn enterBtn m-1\" color = \"dark\" onClick = {handleEnterPop}>ENTER</Button>\r\n                </div>\r\n            }\r\n            {(method === \"insert\") &&\r\n                <div>\r\n                <Form className = \"form\">\r\n                    <Label className=\"btnLabel\">Index to Insert: </Label>\r\n                    <Input onChange = {handleChangeI} value = {formData.index} type = \"number\"></Input>\r\n                    <Label>Value to Insert: </Label>\r\n                    <Input className = \"input\" onChange = {handleChangeV} value = {formData.value} type = \"number\"></Input>\r\n                <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterIns}>ENTER</Button>\r\n                </Form>\r\n                </div>\r\n            }\r\n            {(method === \"delete\") &&\r\n                <div>\r\n                    <Form className = \"form\">\r\n                        <Label className=\"btnLabel\">Index to Delete: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                        <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterDelete}>ENTER</Button>\r\n                    </Form>  \r\n                </div>\r\n            }\r\n            {(method === \"shift\") &&\r\n                <div className = \"justify-content-center\">\r\n                    <Label className = \"btnLabel m-1 \">Press Enter to shift: </Label>\r\n                    <Button className = \"btn enterBtn m-1\" color = \"dark\" onClick = {handleEnterShift}>ENTER</Button>\r\n                </div>\r\n            }\r\n            {(method === \"unshift\") &&\r\n                <div>\r\n                    <Form className = \"form\">\r\n                        <Label className=\"btnLabel\">Value to prepend: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                        <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterUnshift}>ENTER</Button>\r\n                    </Form>\r\n                </div>\r\n            }\r\n            <div className = \"row no-gutters\">\r\n                <p>Arrays are objects in Javascript. Often when they are outside of local functions they are stored in the heap, but this can vary depending on the JavaScript engine implementation. Arrays are a linear arrangement of indices that contain data.\r\n                    They are capable of storing primitive data types, other objects (including arrays), and combinations of both in JavaScript. In a lower level language like C, \r\n                    they can only store one primitive data type and are a fixed size. If arrays are statically allocated, they are stored in the stack memory and the size must be known at compile time.\r\n                    If the size needs to be specified during\r\n                    run-time, the array must be manually dynamically allocated in the heap using the malloc() function, and must be released once it is obsolete by the program using the free() function.</p>\r\n                <ol> <strong>List of Array Functions </strong>\r\n                    <li>Push- inserts new entry after last index of array</li>\r\n                    <li>Pop - removes and returns last entry in the array</li>\r\n                    <li>Insert -  inserts new entry at a specified index in the array</li>\r\n                    <li>Delete - deletes an entry at a specified index in the array</li>\r\n                    <li>Shift - deletes and returns the first entry (0th index in JS & C) of the array</li>\r\n                    <li>Unshift - inserts new entry at the beginning of the array </li>\r\n                </ol>\r\n                <p>Functions that deal with the end of the array like push and pop are executed in consant time O(1). However, functions\r\n                    that deal with the beginning of the array like shift and unshift take linear time O(n) because all of the data needs to\r\n                    be shifted within the array. Insert and delete (splice in JS) can take O(1) to O(n) time depending on their location in the array, \r\n                    the latter time  being closer to the beginning of the array due to shifting. \r\n                </p>\r\n            </div>\r\n        </div> \r\n        \r\n    )\r\n}\r\n\r\nexport default Array;","import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst TreeDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    //const [width, height] = useWindow();\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight; \r\n    console.log(width, height);\r\n    let stW = 900;\r\n    let stH = 900;\r\n    let ratio = stW/stH; \r\n    let x, y, w, h, r\r\n    let colors = [\"red\", \"deepskyblue\", \"lime\", \"mediumpurple\", \"yellow\", \"salmon\", \"white\", \"white\"];\r\n    const draw = ctx => { \r\n        x = width/2;\r\n        y = 0.1*height;\r\n        w = width * (200/stW);\r\n        h = height * (150/stH);\r\n        r = width*(20/stW);\r\n       \r\n        const H = h;\r\n        const W = w; \r\n        const R = r; \r\n        ctx.fillStyle = '#000000';\r\n        let root = props.data.root;\r\n        let counter = 1;\r\n        const treeDraw = (subroot, xC, yC) => {\r\n            let w, h, r;\r\n            w = W;\r\n            h = H;\r\n            r = R; \r\n            if(counter < 5) {\r\n                if(width >= 768 && height >= 998){\r\n                    ctx.font = \"1.5vh Impact\";\r\n                }\r\n                else if(width >= 768){\r\n                    ctx.font = \"2.5vh Impact\";\r\n                }\r\n                else{\r\n                    ctx.font = \"2vh Impact\";\r\n                }\r\n            }\r\n            else{\r\n                if(width >= 768 && height >= 998){\r\n                    ctx.font = \"1.1vh Impact\";\r\n                    r = 0.5*r;\r\n                }\r\n                else if(width >= 768){\r\n                    ctx.font = \"2vh Impact\";\r\n                    r= 0.5*r;\r\n                }\r\n                else{\r\n                    ctx.font = \"1.3vh Impact\";\r\n                    r = 0.65*r;\r\n                }\r\n                \r\n            }\r\n            ctx.beginPath();\r\n            ctx.arc(xC, yC, r, 0*Math.PI, 2*Math.PI);\r\n            ctx.fillStyle = colors[counter-1];\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillStyle = \"black\";\r\n            ctx.fillText(subroot.val, xC, yC);\r\n            if(subroot.left) {\r\n                w= W/counter; \r\n                let m = -h/w;\r\n                let c = -m*xC + yC;        \r\n                let aQ = Math.pow(m, 2) + 1;\r\n                let bQ = -2*(xC + m*yC - m*c);\r\n                let cQ = xC*xC + yC*yC + c*c - r*r - 2*c*yC;\r\n                let xQ1 = (-bQ - Math.sqrt(bQ*bQ - 4*aQ*cQ))/(2*aQ);\r\n                let xQ2 = (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ))/(2*aQ);\r\n                if(counter >= 4) {\r\n                    cQ = xC*xC + yC*yC + c*c - R*R - 2*c*yC;\r\n                    let cQ2 = xC*xC + yC*yC + c*c - r*r/4 - 2*c*yC\r\n                    xQ2 =  (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ2))/(2*aQ);\r\n                }\r\n                let xS = xQ1;\r\n                let yS = m*(xQ1) + c; // y = mx + c; \r\n                let xE = xQ2 - w;\r\n                let yE = m*(xQ2 - w) + c;\r\n                ctx.beginPath();\r\n                ctx.moveTo(xS, yS);\r\n                ctx.lineTo(xE, yE);\r\n                ctx.stroke();\r\n                counter++;\r\n                treeDraw(subroot.left, xC - w, yC + h);\r\n            }  \r\n            if(subroot.right) {\r\n            w = W/(counter);\r\n            let m = h/w;\r\n            let c = -m*xC + yC;  \r\n            let aQ = Math.pow(m, 2) + 1;\r\n            let bQ = -2*(xC + m*yC - m*c);\r\n            let cQ = xC*xC + yC*yC + c*c - r*r - 2*c*yC;\r\n            let xQ1 = (-bQ - Math.sqrt(bQ*bQ - 4*aQ*cQ))/(2*aQ);\r\n            let xQ2 = (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ))/(2*aQ);\r\n            if(counter >= 4) {\r\n                cQ = xC*xC + yC*yC + c*c - R*R - 2*c*yC;\r\n                let cQ2 = xC*xC + yC*yC + c*c - r*r/4 - 2*c*yC\r\n                xQ1 =  (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ2))/(2*aQ);\r\n            }\r\n            let xS = xQ2;\r\n            let yS = m*(xQ2) + c; // y = mx + c; \r\n            let xE = xQ1 + w;\r\n            let yE = m*(xQ1 +  w) + c;\r\n            ctx.beginPath();\r\n            ctx.moveTo(xS, yS);\r\n            ctx.lineTo(xE, yE);\r\n            ctx.stroke();\r\n            counter++;\r\n            treeDraw(subroot.right, xC + w, yC + h);\r\n            }\r\n            counter--;\r\n        }\r\n            treeDraw(root, x, y);\r\n    }\r\n        \r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n            canvas.width = ratio * width;\r\n            canvas.height = height*1200/stH;\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n    return ( <canvas className = \"canvas\" ref = {canvasRef} {...props} />)\r\n    \r\n\r\n}\r\n\r\n\r\nexport default TreeDraw; ","function Node (val){\r\n    val ? this.val = val : this.val = null;\r\n    val ? this.freq = this.freq = 1 : this.freq = 0; // change later\r\n    this.left = null;\r\n    this.right = null;\r\n}\r\nfunction bTree () { \r\n    this.tree = {};\r\n    this.tree.root = new Node();\r\n    this.tree.count = 0;\r\n    this.tree.leftCount = 0;\r\n    this.tree.rightCount = 0;\r\n}\r\nbTree.prototype.insert = function (val) {\r\n    this.tree.count++;\r\n    \r\n    const rIns = (root, val, prev) => {\r\n        console.log(\"INSERT: \", val)\r\n        //console.log(\"LEFTCOUNT: \", leftCount(root));\r\n        //console.log(\"RIGHTCOUNT: \", rightCount(root));\r\n        if(!root.val) {\r\n            //console.log(\"ROOT\", root);\r\n            root.val = val;\r\n        } \r\n        else if(val > root.val){\r\n            this.tree.rightCount++;\r\n            if(root.right && root.left){\r\n                //console.log(\"Recursion_right\");\r\n                rIns(root.right, val, root);\r\n            }\r\n            else{\r\n            right(root, val, prev, this.tree);\r\n            }\r\n        }\r\n        else if(val < root.val){\r\n            this.tree.leftCount++;\r\n            if(root.right && root.left){\r\n                //console.log(\"Recursion_left\");\r\n                rIns(root.left, val, root);\r\n            }\r\n            else{\r\n            left(root, val, prev, this.tree);\r\n            }\r\n        }\r\n        console.log(\"after rIns: \", this.tree);\r\n}\r\nfunction arRight(root, prev) {\r\n    let p = root;\r\n    let val = p.val;\r\n    let nodes = lR(root);\r\n    if(nodes.leaf !== root){\r\n    nodes.leaf.right ? nodes.parent.left = nodes.leaf.right : nodes.parent.left = null;\r\n    nodes.leaf.left = p.left;\r\n    nodes.leaf.right = p.right; \r\n    p.right = null;\r\n    p.left = null;\r\n    }\r\n    console.log(\"Node.leafAfter\", nodes.leaf);\r\n    if(prev) {\r\n        console.log(\"arRight prev bfr\", String(prev.right.val), String(prev.left.val));\r\n        prev.val > nodes.leaf.val ? prev.left = nodes.leaf : prev.right = nodes.leaf;\r\n        console.log(\"arRight prev aftr\", String(prev.right.val), String(prev.left.val));\r\n    }\r\n    rIns(nodes.leaf, val, prev); // IDEALLY SHOULD INSERT NODE RATHER THAN VAL IN THIS CASE SINCE NODE EXISTS\r\n    return nodes.leaf; \r\n}\r\nfunction arLeft(root, prev) {\r\n    let p = root;\r\n    let val = p.val; \r\n    let nodes = gL(root);\r\n    if(nodes.leaf !== root) {\r\n    nodes.leaf.left ? nodes.parent.right = nodes.leaf.left : nodes.parent.right = null;\r\n    nodes.leaf.right = p.right;\r\n    nodes.leaf.left = p.left;\r\n    p.right = null;\r\n    p.left = null;\r\n    p = null;\r\n    }\r\n    console.log(\"Node.leafAfter\", nodes.leaf);\r\n    if(prev) {\r\n        console.log(\"arRight prev bfr\", String(prev.right.val), String(prev.left.val));\r\n        prev.val > nodes.leaf.val ? prev.left = nodes.leaf : prev.right = nodes.leaf;\r\n        console.log(\"arRight prev aftr\", String(prev.right.val), String(prev.left.val));\r\n    }\r\n    rIns(nodes.leaf, val, prev); // IDEALLY SHOULD INSERT NODE RATHER THAN VAL IN THIS CASE SINCE NODE EXISTS\r\n\r\n    return nodes.leaf; \r\n\r\n}\r\nconst balance = (root, val, prev) => {\r\n    let rS, lS;\r\n    if(val > root.val) {\r\n        rS = 0;\r\n        lS = 0;\r\n    }\r\n    else{\r\n        rS = 0;\r\n        lS = 0;\r\n    }\r\n    if(rightCount(root, rS) > leftCount(root, lS)+1){\r\n        console.log(\"LEFTCOUNT: \", leftCount(root, lS));\r\n        console.log(\"RIGHTCOUNT: \", rightCount(root, rS));\r\n        console.log(\"RC ROOT: \", root);\r\n        if(!prev){\r\n            this.tree.root = arRight(root, prev);\r\n        }\r\n        else{\r\n            arRight(root, prev);\r\n        }\r\n        root = this.tree.root;\r\n        this.tree.rightCount--;\r\n    }\r\n    if(leftCount(root, lS) > rightCount(root, rS) + 1) {\r\n        console.log(\"LEFTCOUNT: \", leftCount(root, lS));\r\n        console.log(\"RIGHTCOUNT: \", rightCount(root, rS));\r\n        console.log(\"LC ROOT: \", root);\r\n        if(!prev){\r\n            this.tree.root = arLeft(root, prev);\r\n        }\r\n        else {\r\n            arLeft(root, prev);\r\n        }\r\n        root = this.tree.root;\r\n        this.tree.leftCount--;\r\n    }\r\n    if(root.left) {\r\n        balance(root.left, val, root);\r\n    }\r\n    if(root.right) {\r\n        balance(root.right, val, root);\r\n    } \r\n\r\n}\r\n    \r\n    rIns(this.tree.root, val, null);\r\n    console.log(\"TREE preBal: \", this);\r\n    balance(this.tree.root, val, null);\r\n    console.log(\"TREE: aftrBal \", this);\r\n    \r\n}\r\n\r\nfunction right(root, val, prev, tree) {\r\n    let q = new Node(val);\r\n    //console.log(\"bfr right ops:\", root);\r\n    if(!root.right){\r\n        root.right = q;\r\n        //console.log(\"R0\", root);\r\n    }\r\n    else{\r\n        //Right child becomes head, new node becomes right child\r\n        if(val > root.right.val) {\r\n            //console.log(\"R1\", root);\r\n            let nRoot = root.right;\r\n            nRoot.right = q;\r\n            nRoot.left = root;\r\n            root.right = null;\r\n            if(prev) {\r\n                if(prev.val > root.val){\r\n                    prev.left = nRoot;\r\n                }\r\n                else{\r\n                    prev.right = nRoot;\r\n                }\r\n            }\r\n            else {\r\n                tree.root = nRoot;\r\n            }\r\n        }\r\n        else{\r\n            //console.log(\"R2\", root);\r\n            q.left = root;\r\n            q.right = root.right;\r\n            root.right = null;\r\n            if(prev) {\r\n                if(prev.val > root.val){\r\n                    prev.left = q;\r\n                }\r\n                else{\r\n                    prev.right = q;\r\n                }\r\n            }\r\n            else {\r\n                tree.root = q;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction left(root, val, prev, tree) {\r\n    let q = new Node(val);\r\n    if(!root.left){\r\n        //console.log(\"L0\", root);\r\n        root.left = q;\r\n    }\r\n    else{\r\n        //Left child becomes head, new node becomes right \r\n        //console.log(\"L1\", root);\r\n        if(val < root.left.val) {\r\n            let nRoot = root.left;\r\n            nRoot.left = q;\r\n            nRoot.right = root;\r\n            root.left = null;\r\n            if(prev) {\r\n                if(prev.val > root.val){\r\n                    prev.left = nRoot;\r\n                }\r\n                else{\r\n                    prev.right = nRoot;\r\n                }\r\n            }\r\n            else {\r\n                tree.root = nRoot;\r\n            }\r\n\r\n        }\r\n        else{\r\n            //console.log(\"L2\", root);\r\n            q.right = root;\r\n            q.left = root.left;\r\n            root.left = null;\r\n            if(prev) {\r\n                if(prev.val > root.val){\r\n                    prev.left = q;\r\n                }\r\n                else{\r\n                    prev.right = q;\r\n                }\r\n            }\r\n            else {\r\n                tree.root = q;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction gL(root) {\r\n    if(root){\r\n        if(root.left) {\r\n            let parent = root;\r\n            let lC = root.left; \r\n            while(lC.right) {\r\n                parent = lC; \r\n                lC = lC.right; \r\n            }\r\n        return {parent: parent, leaf: lC}; \r\n        }\r\n    }\r\n}\r\nfunction lR(root) {\r\n    if(root){\r\n        if(root.right){\r\n            let rC = root.right;\r\n            let parent = root;\r\n            while(rC.left) {\r\n                parent = rC;\r\n                rC = rC.left; \r\n            }\r\n    return {parent: parent, leaf: rC}; \r\n        }\r\n    }\r\n}\r\n\r\nfunction leftCount(root, count) {\r\n    const rlc = (root) => {\r\n        if(root.left){\r\n            count++;\r\n            rlc(root.left);\r\n        }\r\n        if(root.right){\r\n            count++;\r\n            rlc(root.right);\r\n        }\r\n    }\r\n    if(root){ \r\n        if(root.left){\r\n            count++;\r\n            rlc(root.left);\r\n        }\r\n}\r\n    return count; \r\n}\r\n\r\nfunction rightCount(root, count) {\r\n    const rlc = (root) => {\r\n        if(root.left){\r\n            count++;\r\n            rlc(root.left);\r\n        }\r\n        if(root.right){\r\n            count++;\r\n            rlc(root.right);\r\n        }\r\n    }\r\n    if(root){ \r\n        if(root.right){\r\n            count++;\r\n            rlc(root.right);\r\n        }\r\n}\r\n    return count; \r\n}\r\n\r\nexport default bTree;\r\n\r\n","function Node (val){\r\n    val ? this.val = val : this.val = null;\r\n    val ? this.freq = this.freq = 1 : this.freq = 0; // change later\r\n    this.left = null;\r\n    this.right = null;\r\n}\r\nfunction bTree () { \r\n    this.tree = {};\r\n    this.tree.root = new Node();\r\n    this.tree.count = 0;\r\n    this.tree.leftCount = 0;\r\n    this.tree.rightCount = 0;\r\n}\r\nbTree.prototype.insert = function (val) {\r\n    this.tree.count++;\r\n    \r\n    const rIns = (root, val, prev) => {\r\n        console.log(\"INSERT: \", val)\r\n        //console.log(\"LEFTCOUNT: \", leftCount(root));\r\n        //console.log(\"RIGHTCOUNT: \", rightCount(root));\r\n        if(!root.val) {\r\n            //console.log(\"ROOT\", root);\r\n            root.val = val;\r\n        } \r\n        else if(val > root.val){\r\n            this.tree.rightCount++;\r\n            if(root.right){\r\n                //console.log(\"Recursion_right\");\r\n                rIns(root.right, val, root);\r\n            }\r\n            else{\r\n                let q = new Node(val);\r\n                root.right = q; \r\n            }\r\n        }\r\n        else if(val < root.val){\r\n            this.tree.leftCount++;\r\n            if(root.left){\r\n                //console.log(\"Recursion_left\");\r\n                rIns(root.left, val, root);\r\n            }\r\n            else{\r\n                let q = new Node(val);\r\n                root.left = q; \r\n            }\r\n        }\r\n        console.log(\"after rIns: \", this.tree);\r\n}\r\nconst arRight = (root, prev) => {\r\n    let p = root;\r\n    let val = p.val;\r\n    let nodes = lR(root);\r\n    if(nodes.parent !== root){\r\n        nodes.leaf.right ? nodes.parent.left = nodes.leaf.right : nodes.parent.left = null;\r\n    \r\n        nodes.leaf.left = p.left;\r\n        nodes.leaf.right = p.right; \r\n    }\r\n    else {\r\n        nodes.leaf.left = p.left;\r\n    }\r\n        p.right = null;\r\n        p.left = null;\r\n    console.log(\"Node.leafAfter\", nodes.leaf);\r\n    if(prev) {\r\n        console.log(\"arRight prev bfr\", String(prev.right.val), String(prev.left.val));\r\n        prev.val > nodes.leaf.val ? prev.left = nodes.leaf : prev.right = nodes.leaf;\r\n        console.log(\"arRight prev aftr\", String(prev.right.val), String(prev.left.val));\r\n    }\r\n    else{\r\n        this.tree.root = nodes.leaf;\r\n    }\r\n    rIns(nodes.leaf, val, prev); // IDEALLY SHOULD INSERT NODE RATHER THAN VAL IN THIS CASE SINCE NODE EXISTS\r\n    return nodes.leaf; \r\n}\r\nconst arLeft = (root, prev) => {\r\n    let p = root;\r\n    let val = p.val; \r\n    let nodes = gL(root);\r\n    if(nodes.parent !== p) {\r\n    nodes.leaf.left ? nodes.parent.right = nodes.leaf.left : nodes.parent.right = null;\r\n    nodes.leaf.right = p.right;\r\n    nodes.leaf.left = p.left;\r\n    }\r\n    else {\r\n        nodes.leaf.right = p.right;\r\n    }\r\n    p.right = null;\r\n    p.left = null;\r\n    p = null;\r\n    console.log(\"Node.leafAfter\", nodes.leaf);\r\n    if(prev) {\r\n        console.log(\"arRight prev bfr\", String(prev.right.val), String(prev.left.val));\r\n        prev.val > nodes.leaf.val ? prev.left = nodes.leaf : prev.right = nodes.leaf;\r\n        console.log(\"arRight prev aftr\", String(prev.right.val), String(prev.left.val));\r\n    }\r\n    else{\r\n        this.tree.root = nodes.leaf;\r\n    }\r\n    rIns(nodes.leaf, val, prev); // IDEALLY SHOULD INSERT NODE RATHER THAN VAL IN THIS CASE SINCE NODE EXISTS\r\n\r\n    return nodes.leaf; \r\n\r\n}\r\nconst balance = (root, val, prev) => {\r\n    let rS, lS;\r\n    if(val > root.val) {\r\n        rS = 0;\r\n        lS = 0;\r\n    }\r\n    else{\r\n        rS = 0;\r\n        lS = 0;\r\n    }\r\n    if(rightCount(root, rS) > leftCount(root, lS)+1){\r\n        console.log(\"LEFTCOUNT: \", leftCount(root, lS));\r\n        console.log(\"RIGHTCOUNT: \", rightCount(root, rS));\r\n        console.log(\"RC ROOT: \", root);\r\n        if(!prev){\r\n            this.tree.root = arRight(root, prev);\r\n            root = this.tree.root;\r\n        }\r\n        else{\r\n           root = arRight(root, prev);\r\n        }\r\n        this.tree.rightCount--;\r\n    }\r\n    else if(leftCount(root, lS) > rightCount(root, rS) + 1) {\r\n        console.log(\"LEFTCOUNT: \", leftCount(root, lS));\r\n        console.log(\"RIGHTCOUNT: \", rightCount(root, rS));\r\n        console.log(\"LC ROOT: \", root);\r\n        if(!prev){\r\n            this.tree.root = arLeft(root, prev);\r\n            root = this.tree.root;\r\n        }\r\n        else {\r\n            root = arLeft(root, prev);\r\n        }\r\n        this.tree.leftCount--;\r\n    }\r\n    if(root.left) {\r\n        balance(root.left, val, root);\r\n    }\r\n    if(root.right) {\r\n        balance(root.right, val, root);\r\n    } \r\n\r\n}\r\n    //HELPER FUNCTIONS\r\n    function gL(root) {\r\n        if(root){\r\n            if(root.left) {\r\n                let parent = root;\r\n                let lC = root.left; \r\n                while(lC.right) {\r\n                    parent = lC; \r\n                    lC = lC.right; \r\n                }\r\n            return {parent: parent, leaf: lC}; \r\n            }\r\n        }\r\n    }\r\n    function lR(root) {\r\n        if(root){\r\n            if(root.right){\r\n                let rC = root.right;\r\n                let parent = root;\r\n                while(rC.left) {\r\n                    parent = rC;\r\n                    rC = rC.left; \r\n                }\r\n        return {parent: parent, leaf: rC}; \r\n            }\r\n        }\r\n    }\r\n    \r\n    function leftCount(root, count) {\r\n        const rlc = (root) => {\r\n            if(root.left){\r\n                count++;\r\n                rlc(root.left);\r\n            }\r\n            if(root.right){\r\n                count++;\r\n                rlc(root.right);\r\n            }\r\n        }\r\n        if(root){ \r\n            if(root.left){\r\n                count++;\r\n                rlc(root.left);\r\n            }\r\n    }\r\n        return count; \r\n    }\r\n    \r\n    function rightCount(root, count) {\r\n        const rlc = (root) => {\r\n            if(root.left){\r\n                count++;\r\n                rlc(root.left);\r\n            }\r\n            if(root.right){\r\n                count++;\r\n                rlc(root.right);\r\n            }\r\n        }\r\n        if(root){ \r\n            if(root.right){\r\n                count++;\r\n                rlc(root.right);\r\n            }\r\n    }\r\n        return count; \r\n    }\r\n    //MAIN: \r\n    rIns(this.tree.root, val, null);\r\n    console.log(\"TREE preBal: \", this);\r\n    balance(this.tree.root, val, null);\r\n    console.log(\"TREE: aftrBal \", this);\r\n}\r\n\r\nexport default bTree;\r\n\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport TreeDraw from \"../components/TreeDraw\";\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\nimport TreeClass from \"../utils/treeObj\";\r\nimport bTree from \"../utils/balancedTree\";\r\nvar tree = new bTree();\r\ntree.insert(5);\r\ntree.insert(1);\r\ntree.insert(8);\r\nfunction Tree () {\r\n    const [method, setMethod] = useState(\"insert\");\r\n    const [treeSrc, setTreeSrc] = useState(tree.tree);\r\n    const [insFormData, setInsFormData] = useState(\" \")\r\n    // Menu for selecting method\r\n    const handleInsert = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"insert\");\r\n    }\r\n    // Methods for tree mutation\r\n    \r\n    // INSERT: \r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData(e.target.value) : setInsFormData(\"\");\r\n    }\r\n\r\n    const handleEnterIns = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData){\r\n            setInsFormData(\"\");\r\n            tree.insert(Number(insFormData));\r\n            setTreeSrc({...tree.tree});\r\n        }\r\n        else{\r\n            setInsFormData(\"Invalid Entry\");\r\n        }\r\n    }\r\n  \r\n    useEffect(()=> {\r\n        //console.log(treeSrc);\r\n        console.log(\"insformData\", insFormData);\r\n    })\r\n\r\n\r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        //console.log(treeSrc);\r\n        console.log(\"insformData\", insFormData);\r\n    },[treeSrc, insFormData, method])\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <div className = \"row no-gutters justify-content-center p-md-3\">\r\n                <h1 className = \"hdr\">TREES</h1>\r\n            </div>\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <img className = \" rounded img-fluid img-hdr\" src = \"https://arbordayblog.org/wp-content/uploads/2018/06/oak-tree-sunset-iStock-477164218.jpg\" width = \"300\" height = \"200\"></img>\r\n            </div>\r\n            <div className = \"row no-gutters p-2 pt-md-3 px-md-5\">\r\n                <p>The binary balanced tree consists of a hierarchy of nodes that store data. Every tree has a root node at the\r\n                    top of the structure. <strong>In the visualizer below, </strong> \r\n                    the tree is operating on the condition that every parent node has 2 or less children and \r\n                    the parent's value is greater than its \r\n                    left child but less than its right child, hence the name: balanced binary tree. The tree stays balanced by keeping track \r\n                    of how many nodes are present on each side of the tree and its sub-trees. A sub-tree may start at any node in the tree other than the root, and includes every \r\n                    descendent below it. The purpose \r\n                    of this balancing act is to keep as many nodes in the tree in the binary structure of having a parent and two children as possible. \r\n                    This allows us to recursively iterate through the tree in O(log n) time, which is faster than O(n) linear time, which would occur if \r\n                    the nodes were ordered in a unary structure (i.e arrays).</p>\r\n                    <p>Notice for each level (K) of the tree, the number of nodes increases from the level above it by a factor of two. \r\n                        Total Nodes(N) = 2<sup>0</sup> + 2<sup>1</sup> + 2<sup>2</sup> + 2<sup>3</sup>... + 2<sup>K</sup>. This\r\n                        simplifies to Total Nodes(N) = 2<sup>K</sup> + 1, where K = 0  at the root node and increases by 1 every\r\n                        level down the tree. \r\n                    </p>\r\n                    <p>This tree was created in Javascript by creating an object (node) that has a value property, and two other properties that point to its \r\n                        left and right children. Objects are created in the heap memory in Javascript which means they are called by reference.\r\n                        If using C/C++, memory needs to be manually dynamicaly allocated in the heap. Nodes would be created in the heap that point to their children. When accessing information from the tree, a pointer to the address of the root node must be used.\r\n                    </p>\r\n            </div>\r\n            {(method === \"insert\") && \r\n            <div>\r\n                <div className = \"row no-gutters px-5 justify-content-center\">\r\n                    <Button color = \"info\" className = \"btn\" onClick = {handleInsert}> Insert</Button>\r\n                </div>\r\n                <div className = \"row no-gutters px-5 justify-content-center\">\r\n                    <Form className = \"form\" onSubmit = {handleEnterIns}>\r\n                        <Label>Value to Insert: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {insFormData} type = \"number\"></Input>\r\n                        <Button className = \"btn\" onClick = {handleEnterIns}>Enter</Button>\r\n                    </Form>\r\n                </div>\r\n                <div >\r\n                    <TreeDraw data = {treeSrc} />\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Tree; ","import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst StackDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n        if(width >= 768){\r\n        x = width/50;\r\n        y = height/50;\r\n        w = width/8;\r\n        h = width/50;\r\n        \r\n        }\r\n        else{\r\n        x = width/20;\r\n        y = height/50;\r\n        w = width/8;\r\n        h = width/16;\r\n        \r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        for(var i = props.data.length - 1; i >= 0; i--) {\r\n            let opp = props.data.length - 1 - i; \r\n            ctx.beginPath();\r\n            ctx.rect(x, y + opp*h, w, h);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"2.5vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(props.data[i], x + 0.5*w, y + 0.5*h + opp*h);\r\n            (width >= 768) ? ctx.font = \"2vh Arial\": ctx.font = \"1.5vh Arial\";\r\n            ctx.fillText(i, 0.5*x, y + 0.5*h + opp*h);\r\n            \r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        canvas.width = 0.3*window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas stkCanvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default StackDraw; ","import React, {useState, useEffect, useRef} from 'react';\r\nimport StackDraw from '../components/StackDraw'\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\n\r\n\r\nconst Stack = () => {\r\n    let arrSource = [];\r\n    for(let i = 0; i < 10; i++) {\r\n        arrSource.push(Math.floor(Math.random() *20));\r\n    }\r\n    const [method, setMethod] = useState(\"push\");\r\n    const [arr, setArr] = useState(arrSource);\r\n    const [formData, setFormData] = useState(\" \");\r\n    const [insFormData, setInsFormData] = useState({index: null, value: null})\r\n    // Menu for selecting method\r\n    const handlePush = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"push\");\r\n    }\r\n    const handlePop = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"pop\");\r\n    }\r\n    \r\n    // Methods for array mutation\r\n    //PUSH:\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\" \");\r\n    }\r\n    const handleEnterPush = (e) => {\r\n        e.preventDefault();\r\n        setArr([...arr, formData]);\r\n        setFormData(\"\");\r\n        \r\n    }\r\n    //POP: \r\n    const handleEnterPop = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.pop();\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n    }\r\n   \r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"arr: \", arr);\r\n        console.log(\"insformData\", insFormData);\r\n    },[arr, formData, , insFormData, method])\r\n    \r\n\r\n\r\n    return (\r\n        <div className = \"px-2 py-3\" >\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <h1 className = \"hdr\">STACKS</h1>\r\n            </div>\r\n            <div className = \"row no-gutters justify-content-center\" >\r\n                <img className = \"rounded img-hdr img-fluid\" src = \"https://images.crateandbarrel.com/is/image/Crate/LoganStackingDinnerPlateWhiteS8SHF15\"/>\r\n            </div>\r\n            <div className = \"row no-gutters justify-content-center\">\r\n                <p className = \"pt-2 px-1 pt-md-3 px-md-5\">The Stack operates on the Last In First Out (LIFO) principle. \r\n                This is analagous to a stack of dishes where the last plate put on the top of the stack is the first \r\n                plate to be used later. They are useful for converting infix expressions to postfix, backtracking \r\n                algorithms, and many other functions.</p>\r\n                <p className = \"p-1 px-md-5\">The push and pop methods are typically O(1) in Javascript. Worst case occurs when \r\n                size boundaries are encountered and the array needs to be copied to different sized array to \r\n                accomodate for change which is O(n) time. \r\n                In C, both functions are O(1) time if implementing the stack using a fixed size array. Worst case can be O(n) if dynamically allocating memory and run out of space. If using a linked list, the \r\n                list should be flipped so the start is the top of the stack to make push and pop O(1) time rather than traversing \r\n                to the end of the list which is O(n) time.  </p>\r\n            </div>\r\n            <div className = \"row no-gutters\" >\r\n                <div className = \"col-md-4\">\r\n                </div>\r\n                <div className = \" col-6 col-md-3 justify-content-md-end\">\r\n                    <Button color = \"success\" className = \"btn float-md-right\" onClick = {handlePush}> Push</Button>\r\n                    <Button color = \"warning\" className = \"btn float-md-right\" onClick = {handlePop}> Pop</Button>\r\n                    {(method === \"push\") && (\r\n                    <Form className = \"form float-md-right\">\r\n                        <Label>Value to push: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                        <Button className = \"btn enterBtn stkComp\" color = \"dark\" onClick = {handleEnterPush}>ENTER</Button>\r\n                    </Form>\r\n                    )}\r\n                    {(method === \"pop\") &&\r\n                        <div className = \"float-md-right d-block\">\r\n                            <Label className = \"btnLabel m-1 d-block\">Press Enter to pop: </Label>\r\n                            <Button className = \"btn enterBtn m-1 d-block float-right\" color = \"dark\" onClick = {handleEnterPop}>ENTER</Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div className = \"col-6 col-md-2 justify-content-md-start\">\r\n                    <StackDraw data = {arr} />\r\n                </div>\r\n                <div className = \"col-md-3\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Stack;","import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst QueueDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n        if(width >=  768 && height > 998) {\r\n            x = width/75;\r\n            y = height/50;\r\n            w = width/20;\r\n            h = width/10;\r\n        }\r\n        else if(width >= 768){\r\n        x = width/20;\r\n        y = height/50;\r\n        w = width/25;\r\n        h = width/15;\r\n        }\r\n        else{\r\n        x = width/20;\r\n        y = height/50;\r\n        w = width/16;\r\n        h = width/12;\r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        for(var i = props.data.length - 1; i >= 0; i--) {\r\n            let opp = props.data.length - 1 - i;\r\n            ctx.beginPath();\r\n            ctx.rect(x + opp*w, y, w, h);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"2.5vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(props.data[i], x + 0.5*w + opp*w, y + 0.5*h);\r\n            (width >= 768) ? ctx.font = \"1.2vh Arial\": ctx.font = \"1vh Arial\";\r\n            if(i === props.data.length - 1){\r\n                ctx.fillText(\"FIRST\", x + 0.5*w + opp*w, y + 1.3*h);\r\n            }\r\n            else if(i === 0) {\r\n                ctx.fillText(\"LAST\", x + 0.5*w + opp*w, y + 1.3*h);\r\n            }\r\n            \r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        \r\n        if(width > 996 & height < 996)  {\r\n            canvas.height = window.innerHeight;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width >= 768 & height >= 768)  {\r\n            canvas.height = window.innerHeight;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width < 996 & height > 996)  {\r\n            canvas.height = window.innerHeight*0.08;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width < 540) {\r\n            canvas.height = window.innerHeight*.25;\r\n            canvas.width = 3*window.innerWidth;\r\n        }\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default QueueDraw; ","import React, {useState, useEffect, useRef} from 'react';\r\nimport QueueDraw from '../components/QueueDraw'\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\n\r\n\r\nconst Queue = () => {\r\n    let arrSource = [];\r\n    for(let i = 0; i < 10; i++) {\r\n        arrSource.push(Math.floor(Math.random() *20));\r\n    }\r\n    const [method, setMethod] = useState(\"enQ\");\r\n    const [arr, setArr] = useState(arrSource);\r\n    const [formData, setFormData] = useState(\" \");\r\n    const [insFormData, setInsFormData] = useState({index: null, value: null})\r\n    // Menu for selecting method\r\n    const handleEQ = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"enQ\");\r\n    }\r\n    const handleDQ = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"dQ\");\r\n    }\r\n    \r\n    // Methods for array mutation\r\n    //Enqueue:\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\" \");\r\n    }\r\n    const handleEnterEQ = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.unshift(formData);\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n        \r\n    }\r\n    //Dequeue: \r\n    const handleEnterDQ = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.pop();\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n    }\r\n   \r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"arr: \", arr);\r\n        console.log(\"insformData\", insFormData);\r\n    },[arr, formData, , insFormData, method])\r\n    \r\n\r\n\r\n    return (\r\n        <div className = \"px-2 py-3\" >\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <h1 className = \"hdr\">Queue</h1>\r\n            </div>\r\n            <div className = \"row no-gutters justify-content-center\" >\r\n                <img className = \"rounded img-hdr img-fluid\" src = \"https://img.freepik.com/free-vector/people-line-waiting-pay_23-2148206445.jpg?size=626&ext=jpg\"/>\r\n            </div>\r\n            <div className = \"row no-gutters justify-content-center\">\r\n                <p className = \"pt-2 px-1 pt-md-3 px-md-5\">The Queue operates on the First In First Out (FIFO) principle.\r\n                Queues may be implemented using linked lists or arrays. Queues have two functions, enqueue and dequeue. Enqueue adds data to the \r\n                back while dequeue removes and returns the data at the front of the structure. \r\n                There are also other ways to implement the queue such as the \r\n                circular queue.\r\n                </p>\r\n                <p className = \"p-1 px-md-5\">  </p>\r\n            </div>\r\n            \r\n                <Button color = \"success\" className = \"btn\" onClick = {handleEQ}>Enqueue</Button>\r\n                <Button color = \"warning\" className = \"btn\" onClick = {handleDQ}>Dequeue</Button>\r\n                <div className = \"row no-gutters\" >\r\n                {(method === \"enQ\") && (\r\n                <Form className = \"form\">\r\n                    <Label>Value to enqueue: </Label>\r\n                    <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                    <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterEQ}>ENTER</Button>\r\n                </Form>\r\n                )}\r\n                {(method === \"dQ\") &&\r\n                    <div className = \"\">\r\n                        <Label className = \"btnLabel\">Press Enter to dequeue: </Label>\r\n                        <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterDQ}>ENTER</Button>\r\n                    </div>\r\n                }\r\n                <div className = \"row no-gutters justify-content-center p-md-3\">\r\n                    <QueueDraw data = {arr} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Queue;","import React from \"react\";\r\n\r\nfunction Node(val) {\r\n    //val ? this.val = val : this.val = null;\r\n    this.val = val;\r\n    this.next = null;\r\n}\r\nfunction sLinkedList () {\r\n    this.list = {};\r\n    this.list.front = null;\r\n    this.list.rear = null;\r\n    this.list.length = 0;\r\n}\r\n\r\nsLinkedList.prototype.prepend = function (val) {\r\n    let q = new Node(val);\r\n    if(!this.list.front) {\r\n        this.list.front = q;\r\n        this.list.rear = q;\r\n        console.log(\"p1\", this.list)\r\n    }\r\n    else {\r\n        q.next = this.list.front;\r\n        this.list.front = q;\r\n        console.log(\"p2\", this.list)\r\n    }\r\n    this.list.length++;\r\n}\r\nsLinkedList.prototype.append = function (val) {\r\n    let q = new Node(val);\r\n    console.log(\"q ap\", q)\r\n    if(!this.list.front){\r\n        this.list.front = q;\r\n        this.list.rear = q;\r\n        console.log(\"ap1\", this.list)\r\n    }\r\n    else {\r\n        this.list.rear.next = q;\r\n        this.list.rear = q; \r\n        console.log(\"ap2\", this.list)\r\n    }\r\n    this.list.length++;\r\n}\r\n\r\nsLinkedList.prototype.delF = function (val) {\r\n    if(this.list.front){\r\n        let p = this.list.front;\r\n        if(this.list.front.next) {\r\n            this.list.front = this.list.front.next;\r\n            this.list.length--;\r\n        }\r\n        else{\r\n            this.list.front = null;\r\n            this.list.length--;\r\n        }\r\n    }\r\n}\r\nsLinkedList.prototype.insert = function (index, val) {\r\n    let p = this.list.front;\r\n    let count = 0;\r\n    if(index === 0) {\r\n        this.prepend(val);\r\n    }\r\n    else if(index === this.list.length) {\r\n        this.append(val);\r\n    }\r\n    else {\r\n    while(p.next) {\r\n        if(count === index - 1){\r\n            let q = new Node(val);\r\n            q.next = p.next;\r\n            p.next = q;\r\n            this.list.length++;\r\n            break;\r\n        }\r\n        p = p.next;\r\n        count++;\r\n       } \r\n}\r\n}\r\n\r\nsLinkedList.prototype.delete = function (index) {\r\n    let p = this.list.front;\r\n    let count = 0;\r\n    if(index === 0) {\r\n        this.list.front = this.list.front.next; \r\n        this.delF();\r\n    }\r\n    \r\n    while(p.next) {\r\n        if(count === this.list.length - 2) {\r\n            p.next = null;\r\n            this.list.length--;\r\n            return;\r\n        }\r\n        if(count === index - 1){\r\n            let q = p.next;\r\n            p.next = q.next;\r\n            q.next = null; // q goes to garbage collection\r\n            this.list.length--;\r\n            return;\r\n        }\r\n        p = p.next;\r\n        count++;\r\n    } \r\n}\r\n\r\nsLinkedList.prototype.update = function (index, val) {\r\n    let p = this.list.front;\r\n    let count = 0;\r\n    console.log(\"IN THE WORKS UPDATE\")\r\n    while(p) {\r\n        if(count === index) {\r\n            p.val = val; \r\n            return;\r\n        }\r\n        p = p.next;\r\n        count++;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default sLinkedList;","import React, {useState, useEffect, useRef} from 'react';\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\nimport List from \"../utils/sLinkedList\";\r\nimport ListDrawS from '../components/ListDrawS';\r\n\r\nvar listSrc = new List();\r\nfor(let i = 0; i < 10; i++) {\r\n    listSrc.prepend(Math.floor(Math.random()*20));\r\n}\r\nfunction LinkedListS (props)  {\r\n    const [method, setMethod] = useState(\"prepend\");\r\n    const [list, setList] = useState(listSrc.list);\r\n    const [formData, setFormData] = useState(\"\");\r\n    const [insFormData, setInsFormData] = useState({index: \"\", value: \"\"})\r\n    // Menu for selecting method\r\n    const handleAppend = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"append\");\r\n    }\r\n    const handlePrepend = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"prepend\");\r\n    }\r\n    const handleInsert = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"insert\");\r\n    }\r\n    const handleDelete = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"delete\");\r\n    }\r\n    const handleDelF = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"delF\");\r\n    }\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"update\");\r\n    }\r\n    // Methods for array mutation\r\n    //Change for push, unshift\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\"\");\r\n        \r\n    }\r\n    //Append\r\n    const handleEnterAppend = (e) => {\r\n        e.preventDefault();\r\n        if(formData){\r\n            listSrc.append(formData);\r\n            setList({...listSrc.list});\r\n            setFormData(\"\");\r\n        }\r\n        else {\r\n            setFormData(\"Invalid Entry\")\r\n        }\r\n        \r\n    }\r\n    //PRepend: \r\n    const handleEnterPrepend = (e) => {\r\n        e.preventDefault();\r\n        if(formData){\r\n            listSrc.prepend(formData);\r\n            setList({...listSrc.list});\r\n            setFormData(\"\");\r\n        }\r\n        else {\r\n            setFormData(\"Invalid Entry\")\r\n        }\r\n    }\r\n    // INSERT: \r\n    const handleChangeI = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, index: Number(e.target.value)}) : setInsFormData({...insFormData, index: \" \"});\r\n    }\r\n    const handleChangeV = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, value: Number(e.target.value)}) : setInsFormData({...insFormData, value: \" \"});\r\n    }\r\n    const handleEnterIns = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData.index >= 0 && insFormData.index <= list.length){\r\n            listSrc.insert(insFormData.index, insFormData.value);\r\n            setList({...listSrc.list});\r\n            setInsFormData({index: \"\", value: \"\"});\r\n        }\r\n        else {\r\n            setInsFormData({...insFormData, index: \"Invalid Entry\", value: \"\"})\r\n        }\r\n    }\r\n    // DELETE\r\n    \r\n    const handleEnterDelete = (e) => {\r\n        e.preventDefault();\r\n        if(formData){\r\n            if(formData >= 0 && formData < list.length){\r\n                listSrc.delete(formData);\r\n                setList({...listSrc.list});\r\n                setFormData(\"\");\r\n            }\r\n            else {\r\n                setFormData(\"INV!\")\r\n            }\r\n        }\r\n    }\r\n    // Delete first node\r\n    const handleEnterDelF = (e) => {\r\n        e.preventDefault();\r\n            listSrc.delF();\r\n            setList({...listSrc.list});\r\n            setFormData(\"\");\r\n    }\r\n\r\n    //Update\r\n    const handleEnterUpdate = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData.index >= 0 && insFormData.index < list.length){\r\n            console.log(Number(insFormData.index))\r\n            listSrc.update(insFormData.index, insFormData.value);\r\n            setList({...listSrc.list});\r\n            setInsFormData({index: \"\", value: \"\"});\r\n        }\r\n        \r\n        else {\r\n            setInsFormData({...insFormData, index: \"Invalid Entry\", value: \"\"})\r\n        }\r\n}\r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"list: \", list);\r\n        console.log(\"insformData\", insFormData);\r\n    },[list, formData, , insFormData, method])\r\n    \r\n\r\n\r\n    return (\r\n        <div className = \"pt-2 p-1 px-md-5 py-md-3\">\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <h1 className = \"hdr\">LINKED LISTS</h1>\r\n            </div>\r\n            <ListDrawS data = {list} />\r\n            <Button color = \"success\" className = \"btn\" onClick = {handlePrepend}>Prepend</Button>\r\n            <Button color = \"primary\" className = \"btn\" onClick = {handleDelF}> Delete First Node</Button>\r\n            <Button color = \"info\" className = \"btn\" onClick = {handleInsert}> Insert</Button>\r\n            <Button color = \"danger\" className = \"btn\" onClick = {handleDelete}> Delete</Button>\r\n            <Button color = \"secondary\" className = \"btn\" onClick = {handleAppend}>Append</Button>\r\n            <Button color = \"success\" className = \"btn\" onClick = {handleUpdate}> Update</Button>\r\n            \r\n            {(method === \"prepend\") && (\r\n            <Form className = \"form\" onSubmit = {handleEnterPrepend}>\r\n                <Label>Value to prepend: </Label>\r\n                <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterPrepend}>ENTER</Button>\r\n            </Form>\r\n            )}\r\n            {(method === \"delF\") &&\r\n                <div>\r\n                    <Label className = \"btnLabel m-1\">Press Enter to delete first node: </Label>\r\n                    <Button className = \"btn enterBtn m-1\" color = \"dark\" onClick = {handleEnterDelF}>ENTER</Button>\r\n                </div>\r\n            }\r\n            {(method === \"insert\") &&\r\n                <div>\r\n                <Form className = \"form\" onSubmit = {handleEnterIns}>\r\n                    <Label className=\"btnLabel\">Index to Insert: </Label>\r\n                    <Input onChange = {handleChangeI} value = {insFormData.index} type = \"number\"></Input>\r\n                    <Label>Value to Insert: </Label>\r\n                    <Input className = \"input\" onChange = {handleChangeV} value = {insFormData.value} type = \"number\"></Input>\r\n                <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterIns}>ENTER</Button>\r\n                </Form>\r\n                </div>\r\n            }\r\n            {(method === \"delete\") &&\r\n                <div>\r\n                    <Form className = \"form\" onSubmit = {handleEnterDelete}>\r\n                        <Label className=\"btnLabel\">Index to Delete: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                        <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterDelete}>ENTER</Button>\r\n                    </Form>  \r\n                </div>\r\n            }\r\n            {(method === \"append\") &&\r\n                <div className = \"justify-content-center\">\r\n                    <Label className = \"btnLabel m-1 \">Press Enter to append: </Label>\r\n                    <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                    <Button className = \"btn enterBtn m-1\" color = \"dark\" onClick = {handleEnterAppend}>ENTER</Button>\r\n                </div>\r\n            }\r\n            {(method === \"update\") &&\r\n                <div>\r\n                    <Form className = \"form\" onSubmit = {handleEnterUpdate}>\r\n                        <Label className=\"btnLabel\">Index to Update: </Label>\r\n                        <Input onChange = {handleChangeI} value = {insFormData.index} type = \"number\"></Input>\r\n                        <Label>Updated value: </Label>\r\n                        <Input className = \"input\" onChange = {handleChangeV} value = {insFormData.value} type = \"number\"></Input>\r\n                        <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterUpdate}>ENTER</Button>\r\n                    </Form>\r\n                </div>\r\n            }\r\n            <div className = \"row no-gutters\">\r\n                <p>Linked Lists are linear data structures where nodes are joined together with pointers. They can be singly or doubly linked. In a singly\r\n                    linked list, nodes only have pointers to the next node while doubly linked lists have pointers to both the\r\n                    previous and next node. Singly linked lists use less memory because each node has just one pointer, but doubly linked lists allow for bi-directional\r\n                    traversal which is more efficient for accessing data towards the end of the list. In both lists, accessing the first node is O(1) time,\r\n                    but in a singly linked list, accessing data towards the end of this list is roughly O(n) time due to traversing from the first node.\r\n                    In a doubly linked list, pointers can be placed at the front and end of the list, so it is O(1) time to access the first and last nodes. It is also possible\r\n                    to link the rear of the list to the front to create a circular linked list. This can be implemented on singly and doubly linked lists. Circular lists can be implemented\r\n                    without any pointers to null which means less edge cases. It can be difficult to know which part of the list is being referenced with the circular implementation.\r\n                </p>\r\n                <p>Linked lists and arrays are both linear data structures but they have certain pros and cons. \r\n                    In lower level languages like C, Linked lists are dynamic so memory can be allocated in run time to create a list of any size  (unless heap is full). They can also store non-primitive data types.\r\n                    Linked lists require more memory than arrays because of the extra space required for two pointers in each node.  \r\n                    Arrays are of a fixed size, and store primitive data types only, but they do provide O(1) random access when extracting data at a specified index. Linked lists \r\n                    require sequential access meaning the list needs to be traversed until the node is found with the correct data (worst case O(n)).\r\n                    Linked lists are more efficient at insert and delete operations because all of the data does not need to be shifted, and removed nodes are freed from memory.\r\n                    </p>\r\n                <ol> <strong>List of Linked List Operations </strong>\r\n                    <li>Prepend- inserts new node at beginning of list</li>\r\n                    <li>Append - insert new node at end of list</li>\r\n                    <li>Insert -  inserts new node at a specified node in the list</li>\r\n                    <li>Delete - deletes a node at a specified node in the list</li>\r\n                    <li>Update - data is updated in a specified node</li>\r\n                    <li>Search - locates a specified piece of data and returns it</li>\r\n                </ol>\r\n            </div>\r\n        </div> \r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default LinkedListS;","import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst ListDrawS = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    let x, y, w, h, lw, al;\r\n    let arrowAng = 20 * Math.PI/180;\r\n    const draw = ctx => {\r\n        // Ipad\r\n        if(width >= 768 && height > 998) {\r\n            x = width/300;\r\n            y = height/50;\r\n            w = width/25;\r\n            h = width/30;\r\n            lw = width/50;\r\n            al = 12;\r\n        }\r\n        else if(width >= 768){\r\n        x = width/300;\r\n        y = height/50;\r\n        w = width/40;\r\n        h = width/40;\r\n        lw = width/50;\r\n        al = 12;\r\n        }\r\n        else if(width < 768 && width > 540){\r\n            x = width/150;\r\n            y = height/50;\r\n            w = width/35;\r\n            h = width/25;\r\n            lw = width/30;\r\n            al = 123;\r\n            }\r\n        else{\r\n        x = 0;\r\n        y = height/50;\r\n        w = width/15;\r\n        h = width/15;\r\n        lw = width/30;\r\n        al = 5;\r\n        \r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        let p = props.data.front;\r\n        console.log(props.data);\r\n        let i = 0;\r\n        while(p) {\r\n            ctx.beginPath();\r\n            ctx.rect(x + i*w + i*lw, y, w, h);\r\n            ctx.rect(x + i*w + i*lw, y + h, w, h);\r\n            ctx.stroke();\r\n            if(p.next) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(x + w + i*(w + lw), y + 1.5*h); \r\n                ctx.lineTo(x + w + i*(w + lw) + lw, y + 1.5*h);\r\n                ctx.moveTo(x + w + i*(w + lw) + lw, y + 1.5*h);\r\n                ctx.lineTo(x + w + i*(w + lw) + lw - al*Math.cos(arrowAng), y + 1.5*h + al*Math.sin(arrowAng));\r\n                ctx.moveTo(x + w + i*(w + lw) + lw, y + 1.5*h);\r\n                ctx.lineTo(x + w + i*(w + lw) + lw - al*Math.cos(arrowAng), y + 1.5*h - al*Math.sin(arrowAng));\r\n                ctx.stroke();\r\n            }\r\n            (width >= 998) ? ctx.font = \"2vh Arial\": ctx.font = \"1.5vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(p.val, x + 0.5*w + i*w + i*lw, y + 0.5*h);\r\n            (width >= 998) ? ctx.font = \"1.2vh Arial\": ctx.font = \"1vh Arial\";\r\n            i===0 ? ctx.fillText(\"Front\", x + 0.5*w + i*w + i*lw, y + 1.3*h): ctx.fillText(\"*\", x + 0.5*w + i*w + i*lw, y + 1.3*h)\r\n            ctx.fillText(i, x + 0.5*w + i*w + i*lw, y + 2.3*h)\r\n            p = p.next;\r\n            i++;\r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        \r\n        if(width > 996 && height < 996)  {\r\n            canvas.height = window.innerHeight*0.2;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width > 996 && height > 996)  {\r\n            canvas.height = window.innerHeight*0.1;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width < 996 && height > 996)  {\r\n            canvas.height = window.innerHeight*0.08;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width < 540) {\r\n            canvas.height = window.innerHeight*.25;\r\n            canvas.width = 3*window.innerWidth;\r\n        }\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default ListDrawS; ","import React, { useState } from 'react';\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, NavbarText } from 'reactstrap';\nimport \"./style.css\";\n\nconst NavEx = (props) => {\n  const [collapsed, setCollapsed] = useState(true);\n\n  const toggleNavbar = () => setCollapsed(!collapsed);\n\n  return (\n    <div>\n      <Navbar id = \"navBar\" light >\n        <NavbarBrand href=\"/data-struct/#/tree\" className=\"mr-auto\" id = \"brand\">DS VISUALIZATION TOOL</NavbarBrand>\n        <NavbarText id = \"tools\">🛠️</NavbarText>\n        <NavbarToggler id = \"navToggler\" onClick={toggleNavbar} className=\"mr-2\" />\n        <Collapse isOpen={!collapsed} navbar>\n          <Nav navbar>\n            <NavItem>\n              <NavLink className = \"navLink\" href= \"/data-struct/#/array\">Arrays</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink className = \"navLink\" href= \"/data-struct/#/linkedList\">Linked Lists</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink className = \"navLink\" href=\"/data-struct/#/stack\">Stacks</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink className = \"navLink\" href=\"/data-struct/#/queue\">Queues</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink className = \"navLink\" href=\"/data-struct/#/tree\">Balanced Binary Trees</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavEx;","import React from \"react\";\nimport Array from \"./pages/Array\";\nimport Tree from \"./pages/Tree\";\nimport Stack from \"./pages/Stack\";\nimport Queue from \"./pages/Queue\";\nimport List from \"./pages/LinkedListS\";\nimport { Route, Switch } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Nav from \"./components/Nav/index.js\";\nimport \"./Style.css\";\n\n\nfunction App() {\n  return (\n    <div>\n      <Nav className = \"navComp\" />\n        <Switch>\n          <Route exact path=\"/\" component={Tree}/>\n          <Route exact path = \"/array\" component = {Array}/>\n          <Route exact path = \"/linkedList\" component = {List}/>\n          <Route exact path = \"/queue\" component = {Queue}/>\n          <Route exact path = \"/tree\" component = {Tree}/>\n          <Route exact path = \"/stack\" component = {Stack}/>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router basename = \"/\">\n      <App />\n    </Router>\n, document.getElementById('root'));\n\n"],"sourceRoot":""}