{"version":3,"sources":["utils/useWindow.js","components/ArrDraw.js","pages/Array.js","components/TreeDraw.js","utils/treeObj.js","utils/balancedTree.js","pages/Tree.js","components/StackDraw.js","pages/Stack.js","components/Nav/index.js","App.js","index.js"],"names":["useWindowSize","useState","size","setSize","useLayoutEffect","updateSize","window","innerWidth","innerHeight","addEventListener","removeEventListener","ArrDraw","props","x","y","w","h","canvasRef","useRef","useWindow","width","height","draw","ctx","fillStyle","i","data","length","beginPath","rect","stroke","font","textAlign","textBaseline","fillText","useEffect","canvas","current","context","getContext","className","ref","Array","arrSource","push","Math","floor","random","method","setMethod","arr","setArr","formData","setFormData","index","value","insFormData","setInsFormData","handlePush","e","preventDefault","handleInsert","handleDelete","handleChange","target","handlePop","temp","pop","console","log","Button","color","onClick","Form","Label","Input","onChange","parseInt","splice","TreeDraw","r","H","W","root","counter","treeDraw","subroot","xC","yC","arc","PI","val","left","m","c","aQ","pow","bQ","cQ","xQ1","sqrt","xQ2","xS","yS","xE","yE","moveTo","lineTo","right","Node","this","freq","bTree","tree","count","leftCount","rightCount","rlc","prototype","insert","rIns","prev","q","nRoot","arRight","p","nodes","rC","parent","leaf","lR","String","arLeft","lC","gL","balance","rS","lS","Tree","treeSrc","setTreeSrc","src","StackDraw","opp","Stack","NavEx","collapsed","setCollapsed","Navbar","id","light","NavbarBrand","href","NavbarText","NavbarToggler","Collapse","isOpen","navbar","Nav","NavItem","NavLink","App","exact","path","component","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.1842ff81.chunk.js","sourcesContent":["import React, {useState, useLayoutEffect} from 'react';\r\nfunction useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n    useLayoutEffect(() => {\r\n      function updateSize() {\r\n        setSize([window.innerWidth, window.innerHeight]);\r\n      }\r\n      window.addEventListener('resize', updateSize);\r\n      updateSize();\r\n      return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n  }\r\n\r\n  export default useWindowSize;","import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst ArrDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const [width, height] = useWindow();\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n        if(width >= 768){\r\n        x = width/50;\r\n        y = height/50;\r\n        w = width/20;\r\n        h = width/20;\r\n        \r\n        }\r\n        else{\r\n        x = width/50;\r\n        y = height/50;\r\n        w = width/12;\r\n        h = width/12;\r\n        \r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        for(var i = 0; i < props.data.length; i++) {\r\n            \r\n            ctx.beginPath();\r\n            ctx.rect(x + i*w, y, w, h);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"4vh Arial\": ctx.font = \"3vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(props.data[i], x + 0.5*w + i*w, y + 0.5*h);\r\n            ctx.font = \"2vh Arial\";\r\n            ctx.fillText(i, x + 0.5*w + i*w, y + 1.3*h);\r\n            \r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = 0.2*window.innerHeight;\r\n        // canvas.style.width = window.innerWidth;\r\n        // canvas.style.height = 0.6*window.innerHeight;\r\n        //context.clearRect(0,0,canvas.width, canvas.height);\r\n        \r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default ArrDraw; ","import React, {useState, useEffect, useRef} from 'react';\r\nimport ArrDraw from '../components/ArrDraw'\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\n\r\n\r\nconst Array = () => {\r\n    let arrSource = [];\r\n    for(let i = 0; i < 10; i++) {\r\n        arrSource.push(Math.floor(Math.random() *20));\r\n    }\r\n    const [method, setMethod] = useState(\"push\");\r\n    const [arr, setArr] = useState(arrSource);\r\n    const [formData, setFormData] = useState(\" \");\r\n    const [insFormData, setInsFormData] = useState({index: null, value: null})\r\n    // Menu for selecting method\r\n    const handlePush = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"push\");\r\n    }\r\n    const handleInsert = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"insert\");\r\n    }\r\n    const handleDelete = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"delete\");\r\n\r\n    }\r\n    // Methods for array mutation\r\n    //PUSH:\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\" \");\r\n        \r\n    }\r\n    const handleEnterPush = (e) => {\r\n        e.preventDefault();\r\n        setArr([...arr, formData]);\r\n        \r\n    }\r\n    //POP: \r\n    const handlePop = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.pop();\r\n        setArr([...temp]);\r\n    }\r\n    // INSERT: \r\n    const handleChangeI = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, index: parseInt(e.target.value)}) : setInsFormData({...insFormData, index: \" \"});\r\n        \r\n    }\r\n    const handleChangeV = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, value: parseInt(e.target.value)}) : setInsFormData({...insFormData, value: \" \"});\r\n    }\r\n    const handleEnterIns = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData.index < arr.length && insFormData.value){\r\n            console.log(\"INSHANDLER\");\r\n            let temp = arr;\r\n            temp.splice(insFormData.index,0, insFormData.value);\r\n            console.log(temp);\r\n            setArr([...temp]);\r\n        }\r\n    }\r\n    // DELETE\r\n    \r\n    const handleEnterDelete = (e) => {\r\n        e.preventDefault();\r\n        if(formData >= 0 && formData < arr.length){\r\n        let temp = arr;\r\n        temp.splice(formData, 1);\r\n        setArr([...temp]);\r\n        }\r\n    }\r\n\r\n\r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"arr: \", arr);\r\n        console.log(\"insformData\", insFormData);\r\n    },[arr, formData, , insFormData, method])\r\n    \r\n\r\nif(method === \"push\") {\r\n    return (\r\n        <div >\r\n            <ArrDraw data = {arr} />\r\n            <Button color = \"success\" className = \"btn\" onClick = {handlePush}> Push</Button>\r\n            <Button color = \"warning\" className = \"btn\" onClick = {handlePop}> Pop</Button>\r\n            <Button color = \"info\" className = \"btn\" onClick = {handleInsert}> Insert</Button>\r\n            <Button color = \"danger\" className = \"btn\" onClick = {handleDelete}> Delete</Button>\r\n            <Form className = \"form\">\r\n                <Label>Value to push: </Label>\r\n                <Input className = \"input\" onChange = {handleChange} value = {formData}></Input>\r\n                <Button className = \"btn\" onClick = {handleEnterPush}>Enter</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\nif(method === \"insert\") {\r\n    return (\r\n        <div>\r\n            <ArrDraw data = {arr} />\r\n            <Button color = \"success\" className = \"btn\" onClick = {handlePush}> Push</Button>\r\n            <Button color = \"warning\" className = \"btn\" onClick = {handlePop}> Pop</Button>\r\n            <Button color = \"info\" className = \"btn\" onClick = {handleInsert}> Insert</Button>\r\n            <Button color = \"danger\" className = \"btn\" onClick = {handleDelete}> Delete</Button>\r\n            <Form className = \"form\">\r\n                <Label>Index to Insert: </Label>\r\n                <Input onChange = {handleChangeI} value = {formData.index}></Input>\r\n                <Label>Value to Insert: </Label>\r\n                <Input className = \"input\" onChange = {handleChangeV} value = {formData.value}></Input>\r\n                <Button className = \"btn\" onClick = {handleEnterIns}>Enter</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\nif(method === \"delete\") {\r\n    return (\r\n        <div>\r\n            <ArrDraw data = {arr} />\r\n            <Button color = \"success\" className = \"btn\" onClick = {handlePush}> Push</Button>\r\n            <Button color = \"warning\" className = \"btn\" onClick = {handlePop}> Pop</Button>\r\n            <Button color = \"info\" className = \"btn\" onClick = {handleInsert}> Insert</Button>\r\n            <Button color = \"danger\" className = \"btn\" onClick = {handleDelete}> Delete</Button>\r\n            <Form className = \"form\">\r\n                <Label>Index to Delete: </Label>\r\n                <Input className = \"input\" onChange = {handleChange} value = {formData}></Input>\r\n                <Button className = \"btn\" onClick = {handleEnterDelete}>Enter</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\n}\r\n\r\nexport default Array;","import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst TreeDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const [width, height] = useWindow();\r\n    let x, y, w, h, r, subH, subW, blank, subBlank;\r\n    const draw = ctx => {\r\n        if(width >= 768){\r\n            x = width/2;\r\n            y = height/15;\r\n            w = width/10;\r\n            h = width/25;\r\n            r = width/75;\r\n            }\r\n        else if(width >= 768){\r\n        x = width/2;\r\n        y = height/20;\r\n        w = width/15;\r\n        h = width/30; \r\n        r = width/75;\r\n        }\r\n        else{\r\n        x = width/2;\r\n        y = height/30;\r\n        w = width/5;\r\n        h = width/5;\r\n        r = width/35;\r\n        }\r\n        const H = h;\r\n        const W = w; \r\n        const Blank = blank;\r\n        ctx.fillStyle = '#000000';\r\n        let root = props.data.root;\r\n        let counter = 1;\r\n        const treeDraw = (subroot, xC, yC) => {\r\n            let w, h, blank;\r\n            blank = 0;\r\n            w = W/counter;\r\n            h = H; \r\n            ctx.beginPath();\r\n            ctx.arc(xC, yC, r, 0*Math.PI, 2*Math.PI);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"3vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(subroot.val, xC, yC);\r\n            if(subroot.left) {\r\n                let m = -h/w;\r\n                let c = -m*xC + yC;        \r\n                let aQ = Math.pow(m, 2) + 1;\r\n                let bQ = -2*(xC + m*yC - m*c);\r\n                let cQ = xC*xC + yC*yC + c*c - r*r - 2*c*yC;\r\n                let xQ1 = (-bQ - Math.sqrt(bQ*bQ - 4*aQ*cQ))/(2*aQ);\r\n                let xQ2 = (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ))/(2*aQ);\r\n                let xS = xQ1;\r\n                let yS = m*(xQ1) + c; // y = mx + c; \r\n                let xE = xQ2 - w;\r\n                let yE = m*(xQ2 - w) + c;\r\n                ctx.beginPath();\r\n                ctx.moveTo(xS, yS);\r\n                ctx.lineTo(xE, yE);\r\n                ctx.stroke();\r\n                counter++;\r\n                treeDraw(subroot.left, xC - w, yC + h);\r\n            }  \r\n            if(subroot.right) {\r\n            let m = h/w;\r\n            let c = -m*xC + yC;  \r\n            let aQ = Math.pow(m, 2) + 1;\r\n            let bQ = -2*(xC + m*yC - m*c);\r\n            let cQ = xC*xC + yC*yC + c*c - r*r - 2*c*yC;\r\n            let xQ1 = (-bQ - Math.sqrt(bQ*bQ - 4*aQ*cQ))/(2*aQ);\r\n            let xQ2 = (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ))/(2*aQ);\r\n            let xS = xQ2;\r\n            let yS = m*(xQ2) + c; // y = mx + c; \r\n            let xE = xQ1 + w;\r\n            let yE = m*(xQ1 +  w) + c;\r\n            ctx.beginPath();\r\n            ctx.arc(xC, yC, r, 0*Math.PI, 2*Math.PI);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"3vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(subroot.val, xC, yC);\r\n            ctx.beginPath();\r\n            ctx.moveTo(xS, yS);\r\n            ctx.lineTo(xE, yE);\r\n            ctx.stroke();\r\n            counter++;\r\n            treeDraw(subroot.right, xC + w, yC + h);\r\n            }\r\n            counter--;\r\n            //console.log(\"counterE\", counter);\r\n        }\r\n            treeDraw(root, x, y);\r\n    }\r\n        \r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = 2*window.innerHeight;\r\n        \r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n    return ( <canvas ref = {canvasRef} {...props} />)\r\n    \r\n\r\n}\r\n\r\n\r\nexport default TreeDraw; ","function Node (val){\r\n    val ? this.val = val : this.val = null;\r\n    val ? this.freq = this.freq = 1 : this.freq = 0; // change later\r\n    this.left = null;\r\n    this.right = null;\r\n}\r\nfunction bTree () { \r\n    this.tree = {};\r\n    this.tree.root = new Node();\r\n    this.tree.count = 0;\r\n    this.tree.leftCount = 0;\r\n    this.tree.rightCount = 0;\r\n}\r\nbTree.prototype.insert = function (val) {\r\n    this.tree.count++;\r\n    \r\n    const rIns = (root, val, prev) => {\r\n        console.log(\"INSERT: \", val)\r\n        //console.log(\"LEFTCOUNT: \", leftCount(root));\r\n        //console.log(\"RIGHTCOUNT: \", rightCount(root));\r\n        if(!root.val) {\r\n            //console.log(\"ROOT\", root);\r\n            root.val = val;\r\n        } \r\n        else if(val > root.val){\r\n            this.tree.rightCount++;\r\n            if(root.right && root.left){\r\n                //console.log(\"Recursion_right\");\r\n                rIns(root.right, val, root);\r\n            }\r\n            else{\r\n            right(root, val, prev, this.tree);\r\n            }\r\n        }\r\n        else if(val < root.val){\r\n            this.tree.leftCount++;\r\n            if(root.right && root.left){\r\n                //console.log(\"Recursion_left\");\r\n                rIns(root.left, val, root);\r\n            }\r\n            else{\r\n            left(root, val, prev, this.tree);\r\n            }\r\n        }\r\n        console.log(\"after rIns: \", this.tree);\r\n}\r\nfunction arRight(root, prev) {\r\n    let p = root;\r\n    let val = p.val;\r\n    let nodes = lR(root);\r\n    if(nodes.leaf !== root){\r\n    nodes.leaf.right ? nodes.parent.left = nodes.leaf.right : nodes.parent.left = null;\r\n    nodes.leaf.left = p.left;\r\n    nodes.leaf.right = p.right; \r\n    p.right = null;\r\n    p.left = null;\r\n    }\r\n    console.log(\"Node.leafAfter\", nodes.leaf);\r\n    if(prev) {\r\n        console.log(\"arRight prev bfr\", String(prev.right.val), String(prev.left.val));\r\n        prev.val > nodes.leaf.val ? prev.left = nodes.leaf : prev.right = nodes.leaf;\r\n        console.log(\"arRight prev aftr\", String(prev.right.val), String(prev.left.val));\r\n    }\r\n    rIns(nodes.leaf, val, prev); // IDEALLY SHOULD INSERT NODE RATHER THAN VAL IN THIS CASE SINCE NODE EXISTS\r\n    return nodes.leaf; \r\n}\r\nfunction arLeft(root, prev) {\r\n    let p = root;\r\n    let val = p.val; \r\n    let nodes = gL(root);\r\n    if(nodes.leaf !== root) {\r\n    nodes.leaf.left ? nodes.parent.right = nodes.leaf.left : nodes.parent.right = null;\r\n    nodes.leaf.right = p.right;\r\n    nodes.leaf.left = p.left;\r\n    p.right = null;\r\n    p.left = null;\r\n    p = null;\r\n    }\r\n    console.log(\"Node.leafAfter\", nodes.leaf);\r\n    if(prev) {\r\n        console.log(\"arRight prev bfr\", String(prev.right.val), String(prev.left.val));\r\n        prev.val > nodes.leaf.val ? prev.left = nodes.leaf : prev.right = nodes.leaf;\r\n        console.log(\"arRight prev aftr\", String(prev.right.val), String(prev.left.val));\r\n    }\r\n    rIns(nodes.leaf, val, prev); // IDEALLY SHOULD INSERT NODE RATHER THAN VAL IN THIS CASE SINCE NODE EXISTS\r\n\r\n    return nodes.leaf; \r\n\r\n}\r\nconst balance = (root, val, prev) => {\r\n    let rS, lS;\r\n    if(val > root.val) {\r\n        rS = 0;\r\n        lS = 0;\r\n    }\r\n    else{\r\n        rS = 0;\r\n        lS = 0;\r\n    }\r\n    if(rightCount(root, rS) > leftCount(root, lS)+1){\r\n        console.log(\"LEFTCOUNT: \", leftCount(root, lS));\r\n        console.log(\"RIGHTCOUNT: \", rightCount(root, rS));\r\n        console.log(\"RC ROOT: \", root);\r\n        if(!prev){\r\n            this.tree.root = arRight(root, prev);\r\n        }\r\n        else{\r\n            arRight(root, prev);\r\n        }\r\n        root = this.tree.root;\r\n        this.tree.rightCount--;\r\n    }\r\n    if(leftCount(root, lS) > rightCount(root, rS) + 1) {\r\n        console.log(\"LEFTCOUNT: \", leftCount(root, lS));\r\n        console.log(\"RIGHTCOUNT: \", rightCount(root, rS));\r\n        console.log(\"LC ROOT: \", root);\r\n        if(!prev){\r\n            this.tree.root = arLeft(root, prev);\r\n        }\r\n        else {\r\n            arLeft(root, prev);\r\n        }\r\n        root = this.tree.root;\r\n        this.tree.leftCount--;\r\n    }\r\n    if(root.left) {\r\n        balance(root.left, val, root);\r\n    }\r\n    if(root.right) {\r\n        balance(root.right, val, root);\r\n    } \r\n\r\n}\r\n    \r\n    rIns(this.tree.root, val, null);\r\n    console.log(\"TREE preBal: \", this);\r\n    balance(this.tree.root, val, null);\r\n    console.log(\"TREE: aftrBal \", this);\r\n    \r\n}\r\n\r\nfunction right(root, val, prev, tree) {\r\n    let q = new Node(val);\r\n    //console.log(\"bfr right ops:\", root);\r\n    if(!root.right){\r\n        root.right = q;\r\n        //console.log(\"R0\", root);\r\n    }\r\n    else{\r\n        //Right child becomes head, new node becomes right child\r\n        if(val > root.right.val) {\r\n            //console.log(\"R1\", root);\r\n            let nRoot = root.right;\r\n            nRoot.right = q;\r\n            nRoot.left = root;\r\n            root.right = null;\r\n            if(prev) {\r\n                if(prev.val > root.val){\r\n                    prev.left = nRoot;\r\n                }\r\n                else{\r\n                    prev.right = nRoot;\r\n                }\r\n            }\r\n            else {\r\n                tree.root = nRoot;\r\n            }\r\n        }\r\n        else{\r\n            //console.log(\"R2\", root);\r\n            q.left = root;\r\n            q.right = root.right;\r\n            root.right = null;\r\n            if(prev) {\r\n                if(prev.val > root.val){\r\n                    prev.left = q;\r\n                }\r\n                else{\r\n                    prev.right = q;\r\n                }\r\n            }\r\n            else {\r\n                tree.root = q;\r\n            }\r\n        }\r\n    }\r\n}\r\nfunction left(root, val, prev, tree) {\r\n    let q = new Node(val);\r\n    if(!root.left){\r\n        //console.log(\"L0\", root);\r\n        root.left = q;\r\n    }\r\n    else{\r\n        //Left child becomes head, new node becomes right \r\n        //console.log(\"L1\", root);\r\n        if(val < root.left.val) {\r\n            let nRoot = root.left;\r\n            nRoot.left = q;\r\n            nRoot.right = root;\r\n            root.left = null;\r\n            if(prev) {\r\n                if(prev.val > root.val){\r\n                    prev.left = nRoot;\r\n                }\r\n                else{\r\n                    prev.right = nRoot;\r\n                }\r\n            }\r\n            else {\r\n                tree.root = nRoot;\r\n            }\r\n\r\n        }\r\n        else{\r\n            //console.log(\"L2\", root);\r\n            q.right = root;\r\n            q.left = root.left;\r\n            root.left = null;\r\n            if(prev) {\r\n                if(prev.val > root.val){\r\n                    prev.left = q;\r\n                }\r\n                else{\r\n                    prev.right = q;\r\n                }\r\n            }\r\n            else {\r\n                tree.root = q;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\nfunction gL(root) {\r\n    if(root){\r\n        if(root.left) {\r\n            let parent = root;\r\n            let lC = root.left; \r\n            while(lC.right) {\r\n                parent = lC; \r\n                lC = lC.right; \r\n            }\r\n        return {parent: parent, leaf: lC}; \r\n        }\r\n    }\r\n}\r\nfunction lR(root) {\r\n    if(root){\r\n        if(root.right){\r\n            let rC = root.right;\r\n            let parent = root;\r\n            while(rC.left) {\r\n                parent = rC;\r\n                rC = rC.left; \r\n            }\r\n    return {parent: parent, leaf: rC}; \r\n        }\r\n    }\r\n}\r\n\r\nfunction leftCount(root, count) {\r\n    const rlc = (root) => {\r\n        if(root.left){\r\n            count++;\r\n            rlc(root.left);\r\n        }\r\n        if(root.right){\r\n            count++;\r\n            rlc(root.right);\r\n        }\r\n    }\r\n    if(root){ \r\n        if(root.left){\r\n            count++;\r\n            rlc(root.left);\r\n        }\r\n}\r\n    return count; \r\n}\r\n\r\nfunction rightCount(root, count) {\r\n    const rlc = (root) => {\r\n        if(root.left){\r\n            count++;\r\n            rlc(root.left);\r\n        }\r\n        if(root.right){\r\n            count++;\r\n            rlc(root.right);\r\n        }\r\n    }\r\n    if(root){ \r\n        if(root.right){\r\n            count++;\r\n            rlc(root.right);\r\n        }\r\n}\r\n    return count; \r\n}\r\n\r\nexport default bTree;\r\n\r\n","function Node (val){\r\n    val ? this.val = val : this.val = null;\r\n    val ? this.freq = this.freq = 1 : this.freq = 0; // change later\r\n    this.left = null;\r\n    this.right = null;\r\n}\r\nfunction bTree () { \r\n    this.tree = {};\r\n    this.tree.root = new Node();\r\n    this.tree.count = 0;\r\n    this.tree.leftCount = 0;\r\n    this.tree.rightCount = 0;\r\n}\r\nbTree.prototype.insert = function (val) {\r\n    this.tree.count++;\r\n    \r\n    const rIns = (root, val, prev) => {\r\n        console.log(\"INSERT: \", val)\r\n        //console.log(\"LEFTCOUNT: \", leftCount(root));\r\n        //console.log(\"RIGHTCOUNT: \", rightCount(root));\r\n        if(!root.val) {\r\n            //console.log(\"ROOT\", root);\r\n            root.val = val;\r\n        } \r\n        else if(val > root.val){\r\n            this.tree.rightCount++;\r\n            if(root.right){\r\n                //console.log(\"Recursion_right\");\r\n                rIns(root.right, val, root);\r\n            }\r\n            else{\r\n                let q = new Node(val);\r\n                root.right = q; \r\n            }\r\n        }\r\n        else if(val < root.val){\r\n            this.tree.leftCount++;\r\n            if(root.left){\r\n                //console.log(\"Recursion_left\");\r\n                rIns(root.left, val, root);\r\n            }\r\n            else{\r\n                let q = new Node(val);\r\n                root.left = q; \r\n            }\r\n        }\r\n        console.log(\"after rIns: \", this.tree);\r\n}\r\nconst arRight = (root, prev) => {\r\n    let p = root;\r\n    let val = p.val;\r\n    let nodes = lR(root);\r\n    if(nodes.parent !== root){\r\n        nodes.leaf.right ? nodes.parent.left = nodes.leaf.right : nodes.parent.left = null;\r\n    \r\n        nodes.leaf.left = p.left;\r\n        nodes.leaf.right = p.right; \r\n    }\r\n    else {\r\n        nodes.leaf.left = p.left;\r\n    }\r\n        p.right = null;\r\n        p.left = null;\r\n    console.log(\"Node.leafAfter\", nodes.leaf);\r\n    if(prev) {\r\n        console.log(\"arRight prev bfr\", String(prev.right.val), String(prev.left.val));\r\n        prev.val > nodes.leaf.val ? prev.left = nodes.leaf : prev.right = nodes.leaf;\r\n        console.log(\"arRight prev aftr\", String(prev.right.val), String(prev.left.val));\r\n    }\r\n    else{\r\n        this.tree.root = nodes.leaf;\r\n    }\r\n    rIns(nodes.leaf, val, prev); // IDEALLY SHOULD INSERT NODE RATHER THAN VAL IN THIS CASE SINCE NODE EXISTS\r\n    return nodes.leaf; \r\n}\r\nconst arLeft = (root, prev) => {\r\n    let p = root;\r\n    let val = p.val; \r\n    let nodes = gL(root);\r\n    if(nodes.parent !== p) {\r\n    nodes.leaf.left ? nodes.parent.right = nodes.leaf.left : nodes.parent.right = null;\r\n    nodes.leaf.right = p.right;\r\n    nodes.leaf.left = p.left;\r\n    }\r\n    else {\r\n        nodes.leaf.right = p.right;\r\n    }\r\n    p.right = null;\r\n    p.left = null;\r\n    p = null;\r\n    console.log(\"Node.leafAfter\", nodes.leaf);\r\n    if(prev) {\r\n        console.log(\"arRight prev bfr\", String(prev.right.val), String(prev.left.val));\r\n        prev.val > nodes.leaf.val ? prev.left = nodes.leaf : prev.right = nodes.leaf;\r\n        console.log(\"arRight prev aftr\", String(prev.right.val), String(prev.left.val));\r\n    }\r\n    else{\r\n        this.tree.root = nodes.leaf;\r\n    }\r\n    rIns(nodes.leaf, val, prev); // IDEALLY SHOULD INSERT NODE RATHER THAN VAL IN THIS CASE SINCE NODE EXISTS\r\n\r\n    return nodes.leaf; \r\n\r\n}\r\nconst balance = (root, val, prev) => {\r\n    let rS, lS;\r\n    if(val > root.val) {\r\n        rS = 0;\r\n        lS = 0;\r\n    }\r\n    else{\r\n        rS = 0;\r\n        lS = 0;\r\n    }\r\n    if(rightCount(root, rS) > leftCount(root, lS)+1){\r\n        console.log(\"LEFTCOUNT: \", leftCount(root, lS));\r\n        console.log(\"RIGHTCOUNT: \", rightCount(root, rS));\r\n        console.log(\"RC ROOT: \", root);\r\n        if(!prev){\r\n            this.tree.root = arRight(root, prev);\r\n            root = this.tree.root;\r\n        }\r\n        else{\r\n           root = arRight(root, prev);\r\n        }\r\n        this.tree.rightCount--;\r\n    }\r\n    else if(leftCount(root, lS) > rightCount(root, rS) + 1) {\r\n        console.log(\"LEFTCOUNT: \", leftCount(root, lS));\r\n        console.log(\"RIGHTCOUNT: \", rightCount(root, rS));\r\n        console.log(\"LC ROOT: \", root);\r\n        if(!prev){\r\n            this.tree.root = arLeft(root, prev);\r\n            root = this.tree.root;\r\n        }\r\n        else {\r\n            root = arLeft(root, prev);\r\n        }\r\n        this.tree.leftCount--;\r\n    }\r\n    if(root.left) {\r\n        balance(root.left, val, root);\r\n    }\r\n    if(root.right) {\r\n        balance(root.right, val, root);\r\n    } \r\n\r\n}\r\n    //HELPER FUNCTIONS\r\n    function gL(root) {\r\n        if(root){\r\n            if(root.left) {\r\n                let parent = root;\r\n                let lC = root.left; \r\n                while(lC.right) {\r\n                    parent = lC; \r\n                    lC = lC.right; \r\n                }\r\n            return {parent: parent, leaf: lC}; \r\n            }\r\n        }\r\n    }\r\n    function lR(root) {\r\n        if(root){\r\n            if(root.right){\r\n                let rC = root.right;\r\n                let parent = root;\r\n                while(rC.left) {\r\n                    parent = rC;\r\n                    rC = rC.left; \r\n                }\r\n        return {parent: parent, leaf: rC}; \r\n            }\r\n        }\r\n    }\r\n    \r\n    function leftCount(root, count) {\r\n        const rlc = (root) => {\r\n            if(root.left){\r\n                count++;\r\n                rlc(root.left);\r\n            }\r\n            if(root.right){\r\n                count++;\r\n                rlc(root.right);\r\n            }\r\n        }\r\n        if(root){ \r\n            if(root.left){\r\n                count++;\r\n                rlc(root.left);\r\n            }\r\n    }\r\n        return count; \r\n    }\r\n    \r\n    function rightCount(root, count) {\r\n        const rlc = (root) => {\r\n            if(root.left){\r\n                count++;\r\n                rlc(root.left);\r\n            }\r\n            if(root.right){\r\n                count++;\r\n                rlc(root.right);\r\n            }\r\n        }\r\n        if(root){ \r\n            if(root.right){\r\n                count++;\r\n                rlc(root.right);\r\n            }\r\n    }\r\n        return count; \r\n    }\r\n    //MAIN: \r\n    rIns(this.tree.root, val, null);\r\n    console.log(\"TREE preBal: \", this);\r\n    balance(this.tree.root, val, null);\r\n    console.log(\"TREE: aftrBal \", this);\r\n}\r\n\r\nexport default bTree;\r\n\r\n","import React, {useState, useEffect, useRef} from 'react';\r\nimport TreeDraw from \"../components/TreeDraw\";\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\nimport TreeClass from \"../utils/treeObj\";\r\nimport bTree from \"../utils/balancedTree\";\r\nvar tree = new bTree();\r\ntree.insert(20);\r\ntree.insert(10);\r\ntree.insert(30);\r\nfunction Tree () {\r\n    const [method, setMethod] = useState(\"insert\");\r\n    const [treeSrc, setTreeSrc] = useState(tree.tree);\r\n    const [insFormData, setInsFormData] = useState(\" \")\r\n    // Menu for selecting method\r\n    const handleInsert = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"insert\");\r\n    }\r\n    // Methods for tree mutation\r\n    \r\n    // INSERT: \r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        if(parseInt(e.target.value)){\r\n        setInsFormData(parseInt(e.target.value));\r\n        }\r\n    }\r\n\r\n    const handleEnterIns = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData){\r\n            tree.insert(insFormData);\r\n            console.log(\"direct src: \", tree)\r\n            setTreeSrc({...tree.tree});\r\n        }\r\n    }\r\n  \r\n    useEffect(()=> {\r\n        //console.log(treeSrc);\r\n        console.log(\"insformData\", insFormData);\r\n    })\r\n\r\n\r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        //console.log(treeSrc);\r\n        console.log(\"insformData\", insFormData);\r\n    },[treeSrc, insFormData, method])\r\n    \r\nif(method === \"insert\") {\r\n    return (\r\n        <div>\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <img src = \"https://arbordayblog.org/wp-content/uploads/2018/06/oak-tree-sunset-iStock-477164218.jpg\" width = \"300\" height = \"200\"></img>\r\n            </div>\r\n            <div className = \"row no-gutters pt-3 px-5\">\r\n                <p>The binary balanced tree consists of a hierarchy of nodes that store data. Every tree has a root node at the\r\n                    top of the structure. In this example, \r\n                    the tree is operating on the condition that every parent node has 2 or less children and \r\n                    the parent's value is greater than its \r\n                    left child but less than its right child, hence the name, balanced binary tree. The tree stays balanced by keeping track \r\n                    of how many nodes are present on each side of the tree its sub-tree. A sub-tree may start at any node in the tree other than the root, and includes every \r\n                    descendent below it. The purpose \r\n                    of this balancing act is to keep as many nodes in the tree in the binary structure of having a parent and two children as possible. \r\n                    This allows us to recursively iterate through the tree in O(log n) time, which is faster than O(n) linnear time, which would occur if \r\n                    the nodes were ordered in a unary structure (i.e arrays).</p>\r\n                    <p>Notice for each level of the tree, the number of nodes increases from the level above it by a factor of two. \r\n                        Total Nodes(N) = 2<sup>0</sup> + 2<sup>1</sup> + 2<sup>2</sup> + 2<sup>3</sup>... + 2<sup>K</sup>. This\r\n                        simplifies to Total Nodes(N) = 2<sup>K</sup> + 1, where K = 0  at the root node and increases by 1 every\r\n                        level down the tree. \r\n                    </p>\r\n            </div>\r\n            <div className = \"row no-gutters px-5\">\r\n                <Button color = \"info\" className = \"btn\" onClick = {handleInsert}> Insert</Button>\r\n            </div>\r\n            <div className = \"row no-gutters px-5\">\r\n                <Form className = \"form\">\r\n                    <Label>Value to Insert: </Label>\r\n                    <Input className = \"input\" onChange = {handleChange} ></Input>\r\n                    <Button className = \"btn\" onClick = {handleEnterIns}>Enter</Button>\r\n                </Form>\r\n            </div>\r\n            <div className = \"row no-gutters\">\r\n                <TreeDraw data = {treeSrc} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n}\r\n\r\n\r\nexport default Tree; ","import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst StackDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const [width, height] = useWindow();\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n        if(width >= 768){\r\n        x = width/50;\r\n        y = height/50;\r\n        w = width/30;\r\n        h = width/30;\r\n        \r\n        }\r\n        else{\r\n        x = width/50;\r\n        y = height/50;\r\n        w = width/12;\r\n        h = width/12;\r\n        \r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        for(var i = props.data.length - 1; i >= 0; i--) {\r\n            let opp = props.data.length - 1 - i; \r\n            ctx.beginPath();\r\n            ctx.rect(x, y + opp*h, w, h);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"3vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(props.data[i], x + 0.5*w, y + 0.5*h + opp*h);\r\n            ctx.font = \"2vh Arial\";\r\n            ctx.fillText(i, 0.5*x, y + 0.5*h + opp*w);\r\n            \r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        canvas.width = 0.3*window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        // canvas.style.width = window.innerWidth;\r\n        // canvas.style.height = 0.6*window.innerHeight;\r\n        //context.clearRect(0,0,canvas.width, canvas.height);\r\n        \r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas stkCanvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default StackDraw; ","import React, {useState, useEffect, useRef} from 'react';\r\nimport StackDraw from '../components/StackDraw'\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\n\r\n\r\nconst Stack = () => {\r\n    let arrSource = [];\r\n    for(let i = 0; i < 10; i++) {\r\n        arrSource.push(Math.floor(Math.random() *20));\r\n    }\r\n    const [method, setMethod] = useState(\"push\");\r\n    const [arr, setArr] = useState(arrSource);\r\n    const [formData, setFormData] = useState(\" \");\r\n    const [insFormData, setInsFormData] = useState({index: null, value: null})\r\n    // Menu for selecting method\r\n    const handlePush = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"push\");\r\n    }\r\n    \r\n    // Methods for array mutation\r\n    //PUSH:\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\" \");\r\n        \r\n    }\r\n    const handleEnterPush = (e) => {\r\n        e.preventDefault();\r\n        setArr([...arr, formData]);\r\n        \r\n    }\r\n    //POP: \r\n    const handlePop = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.pop();\r\n        setArr([...temp]);\r\n    }\r\n   \r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"arr: \", arr);\r\n        console.log(\"insformData\", insFormData);\r\n    },[arr, formData, , insFormData, method])\r\n    \r\n\r\nif(method === \"push\") {\r\n    return (\r\n        <div >\r\n            <div className = \"row no-gutters\" >\r\n            <div className = \"col-3\">\r\n                    <Button color = \"success\" className = \"btn\" onClick = {handlePush}> Push</Button>\r\n                    <Button color = \"warning\" className = \"btn\" onClick = {handlePop}> Pop</Button>\r\n                    <Form className = \"form\">\r\n                        <Label>Value to push: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {formData}></Input>\r\n                        <Button className = \"btn\" onClick = {handleEnterPush}>Enter</Button>\r\n                    </Form>\r\n                </div>\r\n                <div className = \"col-1\">\r\n                    <StackDraw data = {arr} />\r\n                </div>\r\n                <div className = \"col-8\" >\r\n                    <img className = \"pt-3 pr-3 dish\" src = \"https://images.crateandbarrel.com/is/image/Crate/LoganStackingDinnerPlateWhiteS8SHF15\" height = \"200\" width = \"200\"/>\r\n                    <p className = \"pt-3\">The Stack operates on the Last In First Out (LIFO) principle. \r\n                    This is analagous to a stack of dishes where the last plate put on the top of the stack is the first \r\n                    plate to be used later. They are useful for converting infix expressions to postfix, backtracking \r\n                    algorithms, and many other functions.</p>\r\n                    <p className = \"\">The push and pop methods are typically O(1) in Javascript. Worst case occurs when \r\n                    size boundaries are encountered and the array needs to be copied to different sized array to \r\n                    accomodate for change which is O(n) time. \r\n                    In C, both functions are O(1) time if implementing the stack using an array. If using a linked list, the \r\n                    list should be flipped so the start is the top of the stack to make it O(1) time rather than traversing \r\n                    to the end of the list which is O(n) time.  </p>\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n}\r\n\r\nexport default Stack;","import React, { useState } from 'react';\nimport { Collapse, Navbar, NavbarToggler, NavbarBrand, Nav, NavItem, NavLink, NavbarText } from 'reactstrap';\nimport \"./style.css\";\n\nconst NavEx = (props) => {\n  const [collapsed, setCollapsed] = useState(true);\n\n  const toggleNavbar = () => setCollapsed(!collapsed);\n\n  return (\n    <div>\n      <Navbar id = \"navBar\" light >\n        <NavbarBrand href=\"/data-struct/#/tree\" className=\"mr-auto\" id = \"brand\">DS VISUALIZATION TOOL</NavbarBrand>\n        <NavbarText id = \"tools\">🛠️</NavbarText>\n        <NavbarToggler id = \"navToggler\" onClick={toggleNavbar} className=\"mr-2\" />\n        <Collapse isOpen={!collapsed} navbar>\n          <Nav navbar>\n            <NavItem>\n              <NavLink className = \"navLink\" href= \"/data-struct/#/array\">Array</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink className = \"navLink\" href=\"/data-struct/#/stack\">Stack</NavLink>\n            </NavItem>\n            <NavItem>\n              <NavLink className = \"navLink\" href=\"/data-struct/#/tree\">Balanced Binary Tree</NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default NavEx;","import React from \"react\";\nimport Array from \"./pages/Array\";\nimport Tree from \"./pages/Tree\";\nimport Stack from \"./pages/Stack\";\n//import Nav from \"./components/Nav\";\nimport { Route, Switch } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport NavEx from \"./components/Nav/index.js\";\nimport \"./Style.css\";\n\n\nfunction App() {\n  return (\n    <div>\n      <NavEx />\n        <Switch>\n          <Route exact path=\"/\" component={Tree}/>\n          <Route exact path = \"/array\" component = {Array}/>\n          <Route exact path = \"/tree\" component = {Tree}/>\n          <Route exact path = \"/stack\" component = {Stack}/>\n        </Switch>\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n    <Router basename = \"/\">\n      <App />\n    </Router>\n, document.getElementById('root'));\n\n"],"sourceRoot":""}