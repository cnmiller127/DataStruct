[{"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\App.js":"1","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\index.js":"2","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\array.js":"3","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ArrDraw.js":"4","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Array.js":"5","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\Nav\\index.js":"6","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\useWindow.js":"7","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Tree.js":"8","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\treeObj.js":"9","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\TreeDraw.js":"10","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\balancedTree.js":"11","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Stack.js":"12","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\StackDraw.js":"13","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Queue.js":"14","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\QueueDraw.js":"15","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\LinkedListS.js":"16","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ListDrawS.js":"17","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\sLinkedList.js":"18"},{"size":878,"mtime":1611762448123,"results":"19","hashOfConfig":"20"},{"size":276,"mtime":1611639479708,"results":"21","hashOfConfig":"20"},{"size":205,"mtime":1611082526916,"results":"22","hashOfConfig":"20"},{"size":2080,"mtime":1611851080527,"results":"23","hashOfConfig":"20"},{"size":9284,"mtime":1611809089406,"results":"24","hashOfConfig":"20"},{"size":1486,"mtime":1611762324059,"results":"25","hashOfConfig":"20"},{"size":474,"mtime":1611112705417,"results":"26","hashOfConfig":"20"},{"size":5206,"mtime":1611850628216,"results":"27","hashOfConfig":"20"},{"size":8216,"mtime":1611618448819,"results":"28","hashOfConfig":"20"},{"size":5305,"mtime":1611851110598,"results":"29","hashOfConfig":"20"},{"size":6376,"mtime":1611623169432,"results":"30","hashOfConfig":"20"},{"size":4811,"mtime":1611808789297,"results":"31","hashOfConfig":"20"},{"size":1636,"mtime":1611851099516,"results":"32","hashOfConfig":"20"},{"size":3910,"mtime":1611813053002,"results":"33","hashOfConfig":"20"},{"size":2488,"mtime":1611851018904,"results":"34","hashOfConfig":"20"},{"size":11300,"mtime":1611811622150,"results":"35","hashOfConfig":"20"},{"size":3555,"mtime":1611850941490,"results":"36","hashOfConfig":"20"},{"size":2872,"mtime":1611811902932,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1439h9y",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\App.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\index.js",[],["77","78"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\array.js",["79","80"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ArrDraw.js",["81","82"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Array.js",["83","84"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\Nav\\index.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\useWindow.js",["85"],"import React, {useState, useLayoutEffect} from 'react';\r\nfunction useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n    useLayoutEffect(() => {\r\n      function updateSize() {\r\n        setSize([window.innerWidth, window.innerHeight]);\r\n      }\r\n      window.addEventListener('resize', updateSize);\r\n      updateSize();\r\n      return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n  }\r\n\r\n  export default useWindowSize;","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Tree.js",["86","87","88"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport TreeDraw from \"../components/TreeDraw\";\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\nimport TreeClass from \"../utils/treeObj\";\r\nimport bTree from \"../utils/balancedTree\";\r\nvar tree = new bTree();\r\ntree.insert(5);\r\ntree.insert(1);\r\ntree.insert(8);\r\nfunction Tree () {\r\n    const [method, setMethod] = useState(\"insert\");\r\n    const [treeSrc, setTreeSrc] = useState(tree.tree);\r\n    const [insFormData, setInsFormData] = useState(\" \")\r\n    // Menu for selecting method\r\n    const handleInsert = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"insert\");\r\n    }\r\n    // Methods for tree mutation\r\n    \r\n    // INSERT: \r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData(e.target.value) : setInsFormData(\"\");\r\n    }\r\n\r\n    const handleEnterIns = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData){\r\n            setInsFormData(\"\");\r\n            tree.insert(Number(insFormData));\r\n            setTreeSrc({...tree.tree});\r\n        }\r\n        else{\r\n            setInsFormData(\"Invalid Entry\");\r\n        }\r\n    }\r\n  \r\n    useEffect(()=> {\r\n        //console.log(treeSrc);\r\n        console.log(\"insformData\", insFormData);\r\n    })\r\n\r\n\r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        //console.log(treeSrc);\r\n        console.log(\"insformData\", insFormData);\r\n    },[treeSrc, insFormData, method])\r\n    \r\n\r\n    return (\r\n        <div>\r\n            <div className = \"row no-gutters justify-content-center p-md-3\">\r\n                <h1 className = \"hdr\">TREES</h1>\r\n            </div>\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <img className = \" rounded img-fluid img-hdr\" src = \"https://arbordayblog.org/wp-content/uploads/2018/06/oak-tree-sunset-iStock-477164218.jpg\" width = \"300\" height = \"200\"></img>\r\n            </div>\r\n            <div className = \"row no-gutters p-2 pt-md-3 px-md-5\">\r\n                <p>The binary balanced tree consists of a hierarchy of nodes that store data. Every tree has a root node at the\r\n                    top of the structure. <strong>In the visualizer below, </strong> \r\n                    the tree is operating on the condition that every parent node has 2 or less children and \r\n                    the parent's value is greater than its \r\n                    left child but less than its right child, hence the name: balanced binary tree. The tree stays balanced by keeping track \r\n                    of how many nodes are present on each side of the tree and its sub-trees. A sub-tree may start at any node in the tree other than the root, and includes every \r\n                    descendent below it. The purpose \r\n                    of this balancing act is to keep as many nodes in the tree in the binary structure of having a parent and two children as possible. \r\n                    This allows us to recursively iterate through the tree in O(log n) time, which is faster than O(n) linear time, which would occur if \r\n                    the nodes were ordered in a unary structure (i.e arrays).</p>\r\n                    <p>Notice for each level (K) of the tree, the number of nodes increases from the level above it by a factor of two. \r\n                        Total Nodes(N) = 2<sup>0</sup> + 2<sup>1</sup> + 2<sup>2</sup> + 2<sup>3</sup>... + 2<sup>K</sup>. This\r\n                        simplifies to Total Nodes(N) = 2<sup>K</sup> + 1, where K = 0  at the root node and increases by 1 every\r\n                        level down the tree. \r\n                    </p>\r\n                    <p>This tree was created in Javascript by creating an object (node) that has a value property, and two other properties that point to its \r\n                        left and right children. Objects are created in the heap memory in Javascript which means they are called by reference.\r\n                        If using C/C++, memory needs to be manually dynamicaly allocated in the heap. Nodes would be created in the heap that point to their children. When accessing information from the tree, a pointer to the address of the root node must be used.\r\n                    </p>\r\n            </div>\r\n            {(method === \"insert\") && \r\n            <div>\r\n                <div className = \"row no-gutters px-5 justify-content-center\">\r\n                    <Button color = \"info\" className = \"btn\" onClick = {handleInsert}> Insert</Button>\r\n                </div>\r\n                <div className = \"row no-gutters px-5 justify-content-center\">\r\n                    <Form className = \"form\" onSubmit = {handleEnterIns}>\r\n                        <Label>Value to Insert: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {insFormData} type = \"number\"></Input>\r\n                        <Button className = \"btn\" onClick = {handleEnterIns}>Enter</Button>\r\n                    </Form>\r\n                </div>\r\n                <div >\r\n                    <TreeDraw data = {treeSrc} />\r\n                </div>\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport default Tree; ","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\treeObj.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\TreeDraw.js",["89","90","91","92"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\balancedTree.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Stack.js",["93","94","95","96"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\StackDraw.js",["97","98"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Queue.js",["99","100","101","102"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\QueueDraw.js",["103","104"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\LinkedListS.js",["105","106"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ListDrawS.js",["107","108"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\sLinkedList.js",["109","110"],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":3,"column":8,"nodeType":"117","messageId":"118","endLine":3,"endColumn":18},{"ruleId":"115","severity":1,"message":"119","line":4,"column":7,"nodeType":"117","messageId":"118","endLine":4,"endColumn":12},{"ruleId":"115","severity":1,"message":"120","line":1,"column":24,"nodeType":"117","messageId":"118","endLine":1,"endColumn":32},{"ruleId":"121","severity":1,"message":"122","line":9,"column":11,"nodeType":"123","endLine":39,"endColumn":8},{"ruleId":"115","severity":1,"message":"124","line":1,"column":37,"nodeType":"117","messageId":"118","endLine":1,"endColumn":43},{"ruleId":"125","severity":1,"message":"126","line":121,"column":7,"nodeType":"127","messageId":"128","endLine":121,"endColumn":45},{"ruleId":"115","severity":1,"message":"129","line":1,"column":8,"nodeType":"117","messageId":"118","endLine":1,"endColumn":13},{"ruleId":"115","severity":1,"message":"124","line":1,"column":37,"nodeType":"117","messageId":"118","endLine":1,"endColumn":43},{"ruleId":"115","severity":1,"message":"130","line":5,"column":8,"nodeType":"117","messageId":"118","endLine":5,"endColumn":17},{"ruleId":"131","severity":1,"message":"132","line":59,"column":17,"nodeType":"133","endLine":59,"endColumn":189},{"ruleId":"115","severity":1,"message":"120","line":1,"column":24,"nodeType":"117","messageId":"118","endLine":1,"endColumn":32},{"ruleId":"121","severity":1,"message":"134","line":10,"column":11,"nodeType":"123","endLine":122,"endColumn":6},{"ruleId":"115","severity":1,"message":"135","line":35,"column":15,"nodeType":"117","messageId":"118","endLine":35,"endColumn":20},{"ruleId":"115","severity":1,"message":"136","line":41,"column":13,"nodeType":"117","messageId":"118","endLine":41,"endColumn":18},{"ruleId":"115","severity":1,"message":"124","line":1,"column":37,"nodeType":"117","messageId":"118","endLine":1,"endColumn":43},{"ruleId":"115","severity":1,"message":"137","line":15,"column":25,"nodeType":"117","messageId":"118","endLine":15,"endColumn":39},{"ruleId":"125","severity":1,"message":"126","line":51,"column":7,"nodeType":"127","messageId":"128","endLine":51,"endColumn":45},{"ruleId":"131","severity":1,"message":"132","line":61,"column":17,"nodeType":"133","endLine":61,"endColumn":157},{"ruleId":"115","severity":1,"message":"120","line":1,"column":24,"nodeType":"117","messageId":"118","endLine":1,"endColumn":32},{"ruleId":"121","severity":1,"message":"138","line":9,"column":11,"nodeType":"123","endLine":39,"endColumn":8},{"ruleId":"115","severity":1,"message":"124","line":1,"column":37,"nodeType":"117","messageId":"118","endLine":1,"endColumn":43},{"ruleId":"115","severity":1,"message":"137","line":15,"column":25,"nodeType":"117","messageId":"118","endLine":15,"endColumn":39},{"ruleId":"125","severity":1,"message":"126","line":53,"column":7,"nodeType":"127","messageId":"128","endLine":53,"endColumn":45},{"ruleId":"131","severity":1,"message":"132","line":63,"column":17,"nodeType":"133","endLine":63,"endColumn":166},{"ruleId":"115","severity":1,"message":"120","line":1,"column":24,"nodeType":"117","messageId":"118","endLine":1,"endColumn":32},{"ruleId":"121","severity":1,"message":"139","line":9,"column":11,"nodeType":"123","endLine":48,"endColumn":8},{"ruleId":"115","severity":1,"message":"124","line":1,"column":37,"nodeType":"117","messageId":"118","endLine":1,"endColumn":43},{"ruleId":"125","severity":1,"message":"126","line":134,"column":7,"nodeType":"127","messageId":"128","endLine":134,"endColumn":46},{"ruleId":"115","severity":1,"message":"120","line":1,"column":24,"nodeType":"117","messageId":"118","endLine":1,"endColumn":32},{"ruleId":"121","severity":1,"message":"140","line":10,"column":11,"nodeType":"123","endLine":75,"endColumn":8},{"ruleId":"115","severity":1,"message":"129","line":1,"column":8,"nodeType":"117","messageId":"118","endLine":1,"endColumn":13},{"ruleId":"115","severity":1,"message":"141","line":47,"column":13,"nodeType":"117","messageId":"118","endLine":47,"endColumn":14},"no-native-reassign",["142"],"no-negated-in-lhs",["143"],"no-unused-vars","'Reactstrap' is defined but never used.","Identifier","unusedVar","'Array' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","The 'draw' function makes the dependencies of useEffect Hook (at line 63) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","VariableDeclarator","'useRef' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'React' is defined but never used.","'TreeClass' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","The 'draw' function makes the dependencies of useEffect Hook (at line 144) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","'Blank' is assigned a value but never used.","'blank' is assigned a value but never used.","'setInsFormData' is assigned a value but never used.","The 'draw' function makes the dependencies of useEffect Hook (at line 48) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","The 'draw' function makes the dependencies of useEffect Hook (at line 71) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","The 'draw' function makes the dependencies of useEffect Hook (at line 99) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","'p' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]