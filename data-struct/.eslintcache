[{"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\App.js":"1","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\index.js":"2","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\array.js":"3","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ArrDraw.js":"4","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Array.js":"5","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\Nav\\index.js":"6","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\useWindow.js":"7"},{"size":634,"mtime":1611114179216,"results":"8","hashOfConfig":"9"},{"size":504,"mtime":1611076614306,"results":"10","hashOfConfig":"9"},{"size":205,"mtime":1611082526916,"results":"11","hashOfConfig":"9"},{"size":1621,"mtime":1611113020502,"results":"12","hashOfConfig":"9"},{"size":4790,"mtime":1611113991709,"results":"13","hashOfConfig":"9"},{"size":1201,"mtime":1611108241983,"results":"14","hashOfConfig":"9"},{"size":474,"mtime":1611112705417,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1439h9y",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"20"},"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\App.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\index.js",[],["35","36"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\array.js",["37","38"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ArrDraw.js",["39","40"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst ArrDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const [width, height] = useWindow();\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n        if(width >= 768){\r\n        x = width/50;\r\n        y = height/50;\r\n        w = width/20;\r\n        h = width/20;\r\n        }\r\n        else{\r\n        x = width/50;\r\n        y = height/50;\r\n        w = width/12;\r\n        h = width/12;\r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        for(var i = 0; i < props.data.length; i++) {\r\n            \r\n            ctx.beginPath();\r\n            ctx.rect(x + i*w, y, w, h);\r\n            ctx.stroke();\r\n            ctx.font = \"4vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(props.data[i], x + 0.5*w + i*w, y + 0.5*h);\r\n            ctx.font = \"2vh Arial\";\r\n            ctx.fillText(i, x + 0.5*w + i*w, y + 1.3*h);\r\n            \r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = 0.2*window.innerHeight;\r\n        // canvas.style.width = window.innerWidth;\r\n        // canvas.style.height = 0.6*window.innerHeight;\r\n        //context.clearRect(0,0,canvas.width, canvas.height);\r\n        \r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default ArrDraw; ","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Array.js",["41","42"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport ArrDraw from '../components/ArrDraw'\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\n\r\n\r\nconst Array = () => {\r\n    let arrSource = [];\r\n    for(let i = 0; i < 10; i++) {\r\n        arrSource.push(Math.floor(Math.random() *20));\r\n    }\r\n    const [method, setMethod] = useState(\"push\");\r\n    const [arr, setArr] = useState(arrSource);\r\n    const [formData, setFormData] = useState(\" \");\r\n    const [insFormData, setInsFormData] = useState({index: null, value: null})\r\n    // Menu for selecting method\r\n    const handlePush = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"push\");\r\n    }\r\n    const handleInsert = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"insert\");\r\n    }\r\n    const handleDelete = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"delete\");\r\n\r\n    }\r\n    // Methods for array mutation\r\n    //PUSH:\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\" \");\r\n        \r\n    }\r\n    const handleEnterPush = (e) => {\r\n        e.preventDefault();\r\n        setArr([...arr, formData]);\r\n        \r\n    }\r\n    //POP: \r\n    const handlePop = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.pop();\r\n        setArr([...temp]);\r\n    }\r\n    // INSERT: \r\n    const handleChangeI = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, index: parseInt(e.target.value)}) : setInsFormData({...insFormData, index: \" \"});\r\n        \r\n    }\r\n    const handleChangeV = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, value: parseInt(e.target.value)}) : setInsFormData({...insFormData, value: \" \"});\r\n    }\r\n    const handleEnterIns = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData.index < arr.length && insFormData.value){\r\n            console.log(\"INSHANDLER\");\r\n            let temp = arr;\r\n            temp.splice(insFormData.index,0, insFormData.value);\r\n            console.log(temp);\r\n            setArr([...temp]);\r\n        }\r\n    }\r\n    // DELETE\r\n    \r\n    const handleEnterDelete = (e) => {\r\n        e.preventDefault();\r\n        if(formData >= 0 && formData < arr.length){\r\n        let temp = arr;\r\n        temp.splice(formData, 1);\r\n        setArr([...temp]);\r\n        }\r\n    }\r\n\r\n\r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"arr: \", arr);\r\n        console.log(\"insformData\", insFormData);\r\n    },[arr, formData, , insFormData, method])\r\n    \r\n\r\nif(method === \"push\") {\r\n    return (\r\n        <div >\r\n            <ArrDraw data = {arr} />\r\n            <Button color = \"success\" onClick = {handlePush}> Push</Button>\r\n            <Button color = \"warning\" onClick = {handlePop}> Pop</Button>\r\n            <Button color = \"info\" onClick = {handleInsert}> Insert</Button>\r\n            <Button color = \"danger\" onClick = {handleDelete}> Delete</Button>\r\n            <Form>\r\n                <Label>Value to push: </Label>\r\n                <Input onChange = {handleChange} value = {formData}></Input>\r\n                <Button onClick = {handleEnterPush}>Enter</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\nif(method === \"insert\") {\r\n    return (\r\n        <div>\r\n            <ArrDraw data = {arr} />\r\n            <Button color = \"success\" onClick = {handlePush}> Push</Button>\r\n            <Button color = \"warning\" onClick = {handlePop}> Pop</Button>\r\n            <Button color = \"info\" onClick = {handleInsert}> Insert</Button>\r\n            <Button color = \"danger\" onClick = {handleDelete}> Delete</Button>\r\n            <Form>\r\n                <Label>Index to Insert: </Label>\r\n                <Input onChange = {handleChangeI} value = {formData.index}></Input>\r\n                <Label>Value to Insert: </Label>\r\n                <Input onChange = {handleChangeV} value = {formData.value}></Input>\r\n                <Button onClick = {handleEnterIns}>Enter</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\nif(method === \"delete\") {\r\n    return (\r\n        <div>\r\n            <ArrDraw data = {arr} />\r\n            <Button color = \"success\" onClick = {handlePush}> Push</Button>\r\n            <Button color = \"warning\" onClick = {handlePop}> Pop</Button>\r\n            <Button color = \"info\" onClick = {handleInsert}> Insert</Button>\r\n            <Button color = \"danger\" onClick = {handleDelete}> Delete</Button>\r\n            <Form>\r\n                <Label>Index to Delete: </Label>\r\n                <Input onChange = {handleChange} value = {formData}></Input>\r\n                <Button onClick = {handleEnterDelete}>Enter</Button>\r\n            </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\n}\r\n\r\nexport default Array;","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\Nav\\index.js",["43","44","45","46","47","48"],"import React, {useEffect, useContext, useState} from \"react\";\nimport \"./style.css\";\nimport {   Collapse,\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  Nav,\n  NavItem,\n  NavLink,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  NavbarText, } from 'reactstrap';\n\nfunction NavExp() {\n  \n  // const NavStat = () => {\n  //   const contextVal = useContext(NavContext);\n  //   return contextVal;\n  \n  // }\n  //   const navStatus = NavStat();\n  //   console.log(navStatus)\n  \n    // useEffect( () => {\n        \n        \n    //     }, [navStatus.status]);\n\n  const [isOpen, setIsOpen] = useState(false);      \n  const toggle = () => setIsOpen(!isOpen);\n\n  return (\n    <div>\n    <Navbar color=\"info\" light expand=\"md\">\n    <NavbarBrand href=\"/\">DATA STRUCTURE VISUALIZATION TOOL</NavbarBrand>\n    <NavbarToggler onClick={toggle} />\n    <Collapse isOpen={isOpen} navbar>\n      <Nav className=\"mr-auto\" navbar>\n        <NavItem >\n          <NavLink href=\"/\">Home</NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink href = '#'>Array</NavLink>\n        </NavItem>\n      </Nav>\n      <NavbarText></NavbarText>\n    </Collapse>\n  </Navbar>\n</div>\n    );\n}\n\nexport default NavExp;","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\useWindow.js",["49"],"import React, {useState, useLayoutEffect} from 'react';\r\nfunction useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n    useLayoutEffect(() => {\r\n      function updateSize() {\r\n        setSize([window.innerWidth, window.innerHeight]);\r\n      }\r\n      window.addEventListener('resize', updateSize);\r\n      updateSize();\r\n      return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n  }\r\n\r\n  export default useWindowSize;",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":3,"column":8,"nodeType":"56","messageId":"57","endLine":3,"endColumn":18},{"ruleId":"54","severity":1,"message":"58","line":4,"column":7,"nodeType":"56","messageId":"57","endLine":4,"endColumn":12},{"ruleId":"54","severity":1,"message":"59","line":1,"column":24,"nodeType":"56","messageId":"57","endLine":1,"endColumn":32},{"ruleId":"60","severity":1,"message":"61","line":9,"column":11,"nodeType":"62","endLine":37,"endColumn":8},{"ruleId":"54","severity":1,"message":"63","line":1,"column":37,"nodeType":"56","messageId":"57","endLine":1,"endColumn":43},{"ruleId":"64","severity":1,"message":"65","line":85,"column":7,"nodeType":"66","messageId":"67","endLine":85,"endColumn":45},{"ruleId":"54","severity":1,"message":"68","line":1,"column":16,"nodeType":"56","messageId":"57","endLine":1,"endColumn":25},{"ruleId":"54","severity":1,"message":"69","line":1,"column":27,"nodeType":"56","messageId":"57","endLine":1,"endColumn":37},{"ruleId":"54","severity":1,"message":"70","line":10,"column":3,"nodeType":"56","messageId":"57","endLine":10,"endColumn":23},{"ruleId":"54","severity":1,"message":"71","line":11,"column":3,"nodeType":"56","messageId":"57","endLine":11,"endColumn":17},{"ruleId":"54","severity":1,"message":"72","line":12,"column":3,"nodeType":"56","messageId":"57","endLine":12,"endColumn":15},{"ruleId":"54","severity":1,"message":"73","line":13,"column":3,"nodeType":"56","messageId":"57","endLine":13,"endColumn":15},{"ruleId":"54","severity":1,"message":"74","line":1,"column":8,"nodeType":"56","messageId":"57","endLine":1,"endColumn":13},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"no-unused-vars","'Reactstrap' is defined but never used.","Identifier","unusedVar","'Array' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","The 'draw' function makes the dependencies of useEffect Hook (at line 50) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","VariableDeclarator","'useRef' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'useEffect' is defined but never used.","'useContext' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]