[{"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\App.js":"1","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\index.js":"2","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\array.js":"3","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ArrDraw.js":"4","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Array.js":"5","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\Nav\\index.js":"6","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\useWindow.js":"7","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Tree.js":"8","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\treeObj.js":"9","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\TreeDraw.js":"10","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\balancedTree.js":"11","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Stack.js":"12","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\StackDraw.js":"13","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\arrComps\\arrFns.js":"14"},{"size":715,"mtime":1611718105103,"results":"15","hashOfConfig":"16"},{"size":276,"mtime":1611639479708,"results":"17","hashOfConfig":"16"},{"size":205,"mtime":1611082526916,"results":"18","hashOfConfig":"16"},{"size":1742,"mtime":1611711106995,"results":"19","hashOfConfig":"16"},{"size":8670,"mtime":1611719085044,"results":"20","hashOfConfig":"16"},{"size":1201,"mtime":1611684060904,"results":"21","hashOfConfig":"16"},{"size":474,"mtime":1611112705417,"results":"22","hashOfConfig":"16"},{"size":4959,"mtime":1611721187959,"results":"23","hashOfConfig":"16"},{"size":8216,"mtime":1611618448819,"results":"24","hashOfConfig":"16"},{"size":3839,"mtime":1611711667833,"results":"25","hashOfConfig":"16"},{"size":6376,"mtime":1611623169432,"results":"26","hashOfConfig":"16"},{"size":4645,"mtime":1611721033920,"results":"27","hashOfConfig":"16"},{"size":1621,"mtime":1611711063306,"results":"28","hashOfConfig":"16"},{"size":786,"mtime":1611693868170,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1439h9y",{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":6,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\App.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\index.js",[],["63","64"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\array.js",["65","66"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ArrDraw.js",["67","68"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst ArrDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const [width, height] = useWindow();\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n        if(width >= 768){\r\n        x = width/300;\r\n        y = height/50;\r\n        w = width/40;\r\n        h = width/40;\r\n        \r\n        }\r\n        else{\r\n        x = 0;\r\n        y = height/50;\r\n        w = width/15;\r\n        h = width/15;\r\n        \r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        for(var i = 0; i < props.data.length; i++) {\r\n            \r\n            ctx.beginPath();\r\n            ctx.rect(x + i*w, y, w, h);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"2.5vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(props.data[i], x + 0.5*w + i*w, y + 0.5*h);\r\n            (width >= 768) ? ctx.font = \"2vh Arial\": ctx.font = \"1.5vh Arial\";\r\n            ctx.fillText(i, x + 0.5*w + i*w, y + 1.3*h);\r\n            \r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = 0.1*window.innerHeight;\r\n        // canvas.style.width = window.innerWidth;\r\n        // canvas.style.height = 0.6*window.innerHeight;\r\n        //context.clearRect(0,0,canvas.width, canvas.height);\r\n        \r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default ArrDraw; ","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Array.js",["69","70"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\Nav\\index.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\useWindow.js",["71"],"import React, {useState, useLayoutEffect} from 'react';\r\nfunction useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n    useLayoutEffect(() => {\r\n      function updateSize() {\r\n        setSize([window.innerWidth, window.innerHeight]);\r\n      }\r\n      window.addEventListener('resize', updateSize);\r\n      updateSize();\r\n      return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n  }\r\n\r\n  export default useWindowSize;","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Tree.js",["72","73","74"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\treeObj.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\TreeDraw.js",["75","76","77","78","79","80","81"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst TreeDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const [width, height] = useWindow();\r\n    let x, y, w, h, r, subH, subW, blank, subBlank;\r\n    const draw = ctx => {\r\n        if(width >= 768){\r\n            x = width/2;\r\n            y = height/15;\r\n            w = width/10;\r\n            h = width/25;\r\n            r = width/75;\r\n            }\r\n        else if(width >= 768){\r\n        x = width/2;\r\n        y = height/20;\r\n        w = width/15;\r\n        h = width/30; \r\n        r = width/75;\r\n        }\r\n        else{\r\n        x = width/2;\r\n        y = height/20;\r\n        w = width/4;\r\n        h = width/6;\r\n        r = width/35;\r\n        }\r\n        const H = h;\r\n        const W = w; \r\n        const Blank = blank;\r\n        ctx.fillStyle = '#000000';\r\n        let root = props.data.root;\r\n        let counter = 1;\r\n        const treeDraw = (subroot, xC, yC) => {\r\n            let w, h, blank;\r\n            blank = 0;\r\n            w = W/counter;\r\n            h = H; \r\n            ctx.beginPath();\r\n            ctx.arc(xC, yC, r, 0*Math.PI, 2*Math.PI);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"3vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(subroot.val, xC, yC);\r\n            if(subroot.left) {\r\n                let m = -h/w;\r\n                let c = -m*xC + yC;        \r\n                let aQ = Math.pow(m, 2) + 1;\r\n                let bQ = -2*(xC + m*yC - m*c);\r\n                let cQ = xC*xC + yC*yC + c*c - r*r - 2*c*yC;\r\n                let xQ1 = (-bQ - Math.sqrt(bQ*bQ - 4*aQ*cQ))/(2*aQ);\r\n                let xQ2 = (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ))/(2*aQ);\r\n                let xS = xQ1;\r\n                let yS = m*(xQ1) + c; // y = mx + c; \r\n                let xE = xQ2 - w;\r\n                let yE = m*(xQ2 - w) + c;\r\n                ctx.beginPath();\r\n                ctx.moveTo(xS, yS);\r\n                ctx.lineTo(xE, yE);\r\n                ctx.stroke();\r\n                counter++;\r\n                treeDraw(subroot.left, xC - w, yC + h);\r\n            }  \r\n            if(subroot.right) {\r\n            let m = h/w;\r\n            let c = -m*xC + yC;  \r\n            let aQ = Math.pow(m, 2) + 1;\r\n            let bQ = -2*(xC + m*yC - m*c);\r\n            let cQ = xC*xC + yC*yC + c*c - r*r - 2*c*yC;\r\n            let xQ1 = (-bQ - Math.sqrt(bQ*bQ - 4*aQ*cQ))/(2*aQ);\r\n            let xQ2 = (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ))/(2*aQ);\r\n            let xS = xQ2;\r\n            let yS = m*(xQ2) + c; // y = mx + c; \r\n            let xE = xQ1 + w;\r\n            let yE = m*(xQ1 +  w) + c;\r\n            ctx.beginPath();\r\n            ctx.arc(xC, yC, r, 0*Math.PI, 2*Math.PI);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"3vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(subroot.val, xC, yC);\r\n            ctx.beginPath();\r\n            ctx.moveTo(xS, yS);\r\n            ctx.lineTo(xE, yE);\r\n            ctx.stroke();\r\n            counter++;\r\n            treeDraw(subroot.right, xC + w, yC + h);\r\n            }\r\n            counter--;\r\n            //console.log(\"counterE\", counter);\r\n        }\r\n            treeDraw(root, x, y);\r\n    }\r\n        \r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = 2*window.innerHeight;\r\n        \r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n    return ( <canvas ref = {canvasRef} {...props} />)\r\n    \r\n\r\n}\r\n\r\n\r\nexport default TreeDraw; ","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\balancedTree.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Stack.js",["82","83","84","85"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\StackDraw.js",["86","87"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst StackDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const [width, height] = useWindow();\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n        if(width >= 768){\r\n        x = width/50;\r\n        y = height/50;\r\n        w = width/8;\r\n        h = width/50;\r\n        \r\n        }\r\n        else{\r\n        x = width/20;\r\n        y = height/50;\r\n        w = width/8;\r\n        h = width/16;\r\n        \r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        for(var i = props.data.length - 1; i >= 0; i--) {\r\n            let opp = props.data.length - 1 - i; \r\n            ctx.beginPath();\r\n            ctx.rect(x, y + opp*h, w, h);\r\n            ctx.stroke();\r\n            (width >= 768) ? ctx.font = \"2.5vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(props.data[i], x + 0.5*w, y + 0.5*h + opp*h);\r\n            (width >= 768) ? ctx.font = \"2vh Arial\": ctx.font = \"1.5vh Arial\";\r\n            ctx.fillText(i, 0.5*x, y + 0.5*h + opp*h);\r\n            \r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        canvas.width = 0.3*window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas stkCanvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default StackDraw; ","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\arrComps\\arrFns.js",["88","89","90","91","92","93","94","95","96"],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":3,"column":8,"nodeType":"103","messageId":"104","endLine":3,"endColumn":18},{"ruleId":"101","severity":1,"message":"105","line":4,"column":7,"nodeType":"103","messageId":"104","endLine":4,"endColumn":12},{"ruleId":"101","severity":1,"message":"106","line":1,"column":24,"nodeType":"103","messageId":"104","endLine":1,"endColumn":32},{"ruleId":"107","severity":1,"message":"108","line":9,"column":11,"nodeType":"109","endLine":39,"endColumn":8},{"ruleId":"101","severity":1,"message":"110","line":1,"column":37,"nodeType":"103","messageId":"104","endLine":1,"endColumn":43},{"ruleId":"111","severity":1,"message":"112","line":117,"column":7,"nodeType":"113","messageId":"114","endLine":117,"endColumn":45},{"ruleId":"101","severity":1,"message":"115","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},{"ruleId":"101","severity":1,"message":"110","line":1,"column":37,"nodeType":"103","messageId":"104","endLine":1,"endColumn":43},{"ruleId":"101","severity":1,"message":"116","line":5,"column":8,"nodeType":"103","messageId":"104","endLine":5,"endColumn":17},{"ruleId":"117","severity":1,"message":"118","line":58,"column":17,"nodeType":"119","endLine":58,"endColumn":189},{"ruleId":"101","severity":1,"message":"106","line":1,"column":24,"nodeType":"103","messageId":"104","endLine":1,"endColumn":32},{"ruleId":"101","severity":1,"message":"120","line":8,"column":24,"nodeType":"103","messageId":"104","endLine":8,"endColumn":28},{"ruleId":"101","severity":1,"message":"121","line":8,"column":30,"nodeType":"103","messageId":"104","endLine":8,"endColumn":34},{"ruleId":"101","severity":1,"message":"122","line":8,"column":43,"nodeType":"103","messageId":"104","endLine":8,"endColumn":51},{"ruleId":"107","severity":1,"message":"123","line":9,"column":11,"nodeType":"109","endLine":98,"endColumn":6},{"ruleId":"101","severity":1,"message":"124","line":33,"column":15,"nodeType":"103","messageId":"104","endLine":33,"endColumn":20},{"ruleId":"101","severity":1,"message":"125","line":39,"column":13,"nodeType":"103","messageId":"104","endLine":39,"endColumn":18},{"ruleId":"101","severity":1,"message":"110","line":1,"column":37,"nodeType":"103","messageId":"104","endLine":1,"endColumn":43},{"ruleId":"101","severity":1,"message":"126","line":15,"column":25,"nodeType":"103","messageId":"104","endLine":15,"endColumn":39},{"ruleId":"111","severity":1,"message":"112","line":49,"column":7,"nodeType":"113","messageId":"114","endLine":49,"endColumn":45},{"ruleId":"117","severity":1,"message":"118","line":59,"column":17,"nodeType":"119","endLine":59,"endColumn":157},{"ruleId":"101","severity":1,"message":"106","line":1,"column":24,"nodeType":"103","messageId":"104","endLine":1,"endColumn":32},{"ruleId":"107","severity":1,"message":"127","line":9,"column":11,"nodeType":"109","endLine":39,"endColumn":8},{"ruleId":"101","severity":1,"message":"128","line":2,"column":17,"nodeType":"103","messageId":"104","endLine":2,"endColumn":21},{"ruleId":"101","severity":1,"message":"129","line":2,"column":23,"nodeType":"103","messageId":"104","endLine":2,"endColumn":28},{"ruleId":"101","severity":1,"message":"130","line":2,"column":30,"nodeType":"103","messageId":"104","endLine":2,"endColumn":35},{"ruleId":"131","severity":2,"message":"132","line":9,"column":68,"nodeType":"103","messageId":"133","endLine":9,"endColumn":78},{"ruleId":"131","severity":2,"message":"134","line":10,"column":68,"nodeType":"103","messageId":"133","endLine":10,"endColumn":77},{"ruleId":"131","severity":2,"message":"135","line":11,"column":65,"nodeType":"103","messageId":"133","endLine":11,"endColumn":77},{"ruleId":"131","severity":2,"message":"136","line":12,"column":67,"nodeType":"103","messageId":"133","endLine":12,"endColumn":79},{"ruleId":"131","severity":2,"message":"137","line":13,"column":70,"nodeType":"103","messageId":"133","endLine":13,"endColumn":81},{"ruleId":"131","severity":2,"message":"138","line":14,"column":68,"nodeType":"103","messageId":"133","endLine":14,"endColumn":81},"no-native-reassign",["139"],"no-negated-in-lhs",["140"],"no-unused-vars","'Reactstrap' is defined but never used.","Identifier","unusedVar","'Array' is assigned a value but never used.","'useState' is defined but never used.","react-hooks/exhaustive-deps","The 'draw' function makes the dependencies of useEffect Hook (at line 52) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","VariableDeclarator","'useRef' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","ArrayExpression","unexpectedSparseArray","'React' is defined but never used.","'TreeClass' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'subH' is defined but never used.","'subW' is defined but never used.","'subBlank' is defined but never used.","The 'draw' function makes the dependencies of useEffect Hook (at line 109) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","'Blank' is assigned a value but never used.","'blank' is assigned a value but never used.","'setInsFormData' is assigned a value but never used.","The 'draw' function makes the dependencies of useEffect Hook (at line 48) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","'Form' is defined but never used.","'Input' is defined but never used.","'Label' is defined but never used.","no-undef","'handlePush' is not defined.","undef","'handlePop' is not defined.","'handleInsert' is not defined.","'handleDelete' is not defined.","'handleShift' is not defined.","'handleUnshift' is not defined.","no-global-assign","no-unsafe-negation"]