[{"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\App.js":"1","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\index.js":"2","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\array.js":"3","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ArrDraw.js":"4","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Array.js":"5","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\Nav\\index.js":"6","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\useWindow.js":"7","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Tree.js":"8","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\treeObj.js":"9","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\TreeDraw.js":"10","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\balancedTree.js":"11","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Stack.js":"12","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\StackDraw.js":"13","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Queue.js":"14","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\QueueDraw.js":"15","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\LinkedListS.js":"16","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ListDrawS.js":"17","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\sLinkedList.js":"18"},{"size":878,"mtime":1611762448123,"results":"19","hashOfConfig":"20"},{"size":276,"mtime":1611639479708,"results":"21","hashOfConfig":"20"},{"size":205,"mtime":1611082526916,"results":"22","hashOfConfig":"20"},{"size":2515,"mtime":1611888275270,"results":"23","hashOfConfig":"20"},{"size":9400,"mtime":1611944802054,"results":"24","hashOfConfig":"20"},{"size":1486,"mtime":1611762324059,"results":"25","hashOfConfig":"20"},{"size":610,"mtime":1611869867945,"results":"26","hashOfConfig":"20"},{"size":6529,"mtime":1612212410288,"results":"27","hashOfConfig":"20"},{"size":8216,"mtime":1611618448819,"results":"28","hashOfConfig":"20"},{"size":4876,"mtime":1611879423710,"results":"29","hashOfConfig":"20"},{"size":7762,"mtime":1612285731809,"results":"30","hashOfConfig":"20"},{"size":4811,"mtime":1611808789297,"results":"31","hashOfConfig":"20"},{"size":2268,"mtime":1612039389033,"results":"32","hashOfConfig":"20"},{"size":5644,"mtime":1611944614947,"results":"33","hashOfConfig":"20"},{"size":3084,"mtime":1611941176430,"results":"34","hashOfConfig":"20"},{"size":12071,"mtime":1611941067875,"results":"35","hashOfConfig":"20"},{"size":4080,"mtime":1612038913927,"results":"36","hashOfConfig":"20"},{"size":2872,"mtime":1611811902932,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1439h9y",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"40"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"40"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"40"},"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\App.js",[],["86","87"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\index.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\array.js",["88","89"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ArrDraw.js",["90","91","92"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst ArrDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n        if(width >=  768 && height > 998) {\r\n            x = width/75;\r\n            y = height/50;\r\n            w = width/15;\r\n            h = width/15;\r\n        }\r\n        else if(width >= 768){\r\n        x = width/20;\r\n        y = height/50;\r\n        w = width/20;\r\n        h = width/20;\r\n        }\r\n        else{\r\n        x = width/20;\r\n        y = height/50;\r\n        w = width/15;\r\n        h = width/15;\r\n        }\r\n   \r\n        ctx.fillStyle = '#000000';\r\n        for(var i = 0; i < props.data.length; i++) {\r\n            ctx.fillStyle = \"black\";\r\n            ctx.strokeStyle = \"yellow\";\r\n            ctx.lineWidth = 3;\r\n            ctx.beginPath();\r\n            ctx.rect(x + i*w, y, w, h);\r\n            ctx.stroke();\r\n            ctx.fill();\r\n            ctx.fillStyle = \"yellow\";\r\n            (width >= 768) ? ctx.font = \"2.5vh Arial\": ctx.font = \"2vh Arial\";\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillText(props.data[i], x + 0.5*w + i*w, y + 0.5*h);\r\n            (width >= 768) ? ctx.font = \"2vh Arial\": ctx.font = \"1.5vh Arial\";\r\n            ctx.fillStyle = \"black\";\r\n            ctx.fillText(i, x + 0.5*w + i*w, y + 1.3*h);\r\n            \r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        if(width > 996 & height < 996)  {\r\n          canvas.height = window.innerHeight*0.2;\r\n          canvas.width = window.innerWidth;\r\n      }\r\n      else if(width >= 768 & height >= 768)  {\r\n          canvas.height = window.innerHeight*0.2;\r\n          canvas.width = window.innerWidth;\r\n      }\r\n      else if(width < 996 & height > 996)  {\r\n          canvas.height = window.innerHeight*0.08;\r\n          canvas.width = window.innerWidth;\r\n      }\r\n      else if(width < 540) {\r\n          canvas.height = window.innerHeight*.1;\r\n          canvas.width = 2*window.innerWidth;\r\n      }\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default ArrDraw; ","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Array.js",["93","94"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport ArrDraw from '../components/ArrDraw'\r\n//import ArrComps from '../components/arrComps/arrFns';\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\n\r\n\r\nconst Array = () => {\r\n    let arrSource = [];\r\n    for(let i = 0; i < 10; i++) {\r\n        arrSource.push(Math.floor(Math.random() *20));\r\n    }\r\n    const [method, setMethod] = useState(\"push\");\r\n    const [arr, setArr] = useState(arrSource);\r\n    const [formData, setFormData] = useState(\" \");\r\n    const [insFormData, setInsFormData] = useState({index: null, value: null})\r\n    // Menu for selecting method\r\n    const handlePush = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"push\");\r\n    }\r\n    const handlePop = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"pop\");\r\n    }\r\n    const handleInsert = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"insert\");\r\n    }\r\n    const handleDelete = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"delete\");\r\n    }\r\n    const handleShift = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"shift\");\r\n    }\r\n    const handleUnshift = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"unshift\");\r\n    }\r\n    // Methods for array mutation\r\n    //Change for push, unshift\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\" \");\r\n        \r\n    }\r\n    //PUSH \r\n    const handleEnterPush = (e) => {\r\n        e.preventDefault();\r\n        setArr([...arr, formData]);\r\n        setFormData(\"\");\r\n        \r\n    }\r\n    //POP: \r\n    const handleEnterPop = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.pop();\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n    }\r\n    // INSERT: \r\n    const handleChangeI = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, index: e.target.value}) : setInsFormData({...insFormData, index: \" \"});\r\n    }\r\n    const handleChangeV = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, value: e.target.value}) : setInsFormData({...insFormData, value: \" \"});\r\n    }\r\n    const handleEnterIns = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData.index < arr.length && insFormData.value){\r\n            console.log(\"INSHANDLER\");\r\n            let temp = arr;\r\n            temp.splice(insFormData.index,0, insFormData.value);\r\n            console.log(temp);\r\n            setArr([...temp]);\r\n            setFormData(\"\");\r\n        }\r\n    }\r\n    // DELETE\r\n    \r\n    const handleEnterDelete = (e) => {\r\n        e.preventDefault();\r\n        if(formData >= 0 && formData < arr.length){\r\n        let temp = arr;\r\n        temp.splice(formData, 1);\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n        }\r\n    }\r\n    // Shift\r\n    const handleEnterShift = (e) => {\r\n        e.preventDefault();\r\n        if(formData >= 0 && formData < arr.length){\r\n        let temp = arr;\r\n        temp.shift();\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n        }\r\n    }\r\n\r\n    //Unshift\r\n    const handleEnterUnshift = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.unshift(formData);\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n        \r\n    }\r\n\r\n\r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"arr: \", arr);\r\n        console.log(\"insformData\", insFormData);\r\n    },[arr, formData, , insFormData, method])\r\n    \r\n\r\n\r\n    return (\r\n        <div className = \"pt-2 p-1 px-md-5 py-md-3\">\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <h1 className = \"hdr\">ARRAYS</h1>\r\n            </div>\r\n            <ArrDraw data = {arr} />\r\n            <Button color = \"success\" className = \"btn\" onClick = {handlePush}> Push</Button>\r\n            <Button color = \"warning\" className = \"btn\" onClick = {handlePop}> Pop</Button>\r\n            <Button color = \"info\" className = \"btn\" onClick = {handleInsert}> Insert</Button>\r\n            <Button color = \"danger\" className = \"btn\" onClick = {handleDelete}> Delete</Button>\r\n            <Button color = \"secondary\" className = \"btn\" onClick = {handleShift}> Shift</Button>\r\n            <Button color = \"primary\" className = \"btn\" onClick = {handleUnshift}> Unshift</Button>\r\n            {(method === \"push\") && (\r\n            <Form className = \"form\">\r\n                <Label>Value to push: </Label>\r\n                <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterPush}>ENTER</Button>\r\n            </Form>\r\n            )}\r\n            {(method === \"pop\") &&\r\n                <div>\r\n                    <Label className = \"btnLabel m-1\">Press Enter to pop: </Label>\r\n                    <Button className = \"btn enterBtn m-1\" color = \"dark\" onClick = {handleEnterPop}>ENTER</Button>\r\n                </div>\r\n            }\r\n            {(method === \"insert\") &&\r\n                <div>\r\n                <Form className = \"form\">\r\n                    <Label className=\"btnLabel\">Index to Insert: </Label>\r\n                    <Input onChange = {handleChangeI} value = {formData.index} type = \"number\"></Input>\r\n                    <Label>Value to Insert: </Label>\r\n                    <Input className = \"input\" onChange = {handleChangeV} value = {formData.value} type = \"number\"></Input>\r\n                <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterIns}>ENTER</Button>\r\n                </Form>\r\n                </div>\r\n            }\r\n            {(method === \"delete\") &&\r\n                <div>\r\n                    <Form className = \"form\">\r\n                        <Label className=\"btnLabel\">Index to Delete: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                        <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterDelete}>ENTER</Button>\r\n                    </Form>  \r\n                </div>\r\n            }\r\n            {(method === \"shift\") &&\r\n                <div className = \"justify-content-center\">\r\n                    <Label className = \"btnLabel m-1 \">Press Enter to shift: </Label>\r\n                    <Button className = \"btn enterBtn m-1\" color = \"dark\" onClick = {handleEnterShift}>ENTER</Button>\r\n                </div>\r\n            }\r\n            {(method === \"unshift\") &&\r\n                <div>\r\n                    <Form className = \"form\">\r\n                        <Label className=\"btnLabel\">Value to prepend: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                        <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterUnshift}>ENTER</Button>\r\n                    </Form>\r\n                </div>\r\n            }\r\n            <div className = \"row no-gutters\">\r\n                <p>Arrays are objects in Javascript. Often when they are outside of local functions they are stored in the heap, but this can vary depending on the JavaScript engine implementation. Arrays are a linear arrangement of indices that contain data.\r\n                    They are capable of storing primitive data types, other objects (including arrays), and combinations of both in JavaScript. In a lower level language like C, \r\n                    they can only store one primitive data type and are a fixed size. If arrays are statically allocated, they are stored in the stack memory and the size must be known at compile time.\r\n                    If the size needs to be specified during\r\n                    run-time, the array must be manually dynamically allocated in the heap using the malloc() function, and must be released once it is obsolete by the program using the free() function. In both languages,\r\n                    arrays provide random access retrieval, meaning an index of an array is specified and it is accessed in constant O(1) time.</p>\r\n                <ol> <strong>List of Array Functions </strong>\r\n                    <li>Push- inserts new entry after last index of array</li>\r\n                    <li>Pop - removes and returns last entry in the array</li>\r\n                    <li>Insert -  inserts new entry at a specified index in the array</li>\r\n                    <li>Delete - deletes an entry at a specified index in the array</li>\r\n                    <li>Shift - deletes and returns the first entry (0th index in JS & C) of the array</li>\r\n                    <li>Unshift - inserts new entry at the beginning of the array </li>\r\n                </ol>\r\n                <p>Functions that deal with the end of the array like push and pop are executed in consant time O(1). However, functions\r\n                    that deal with the beginning of the array like shift and unshift take linear time O(n) because all of the data needs to\r\n                    be shifted within the array. Insert and delete (splice in JS) can take O(1) to O(n) time depending on their location in the array (end of array vs. beginning of array, respectively).\r\n                </p>\r\n            </div>\r\n        </div> \r\n        \r\n    )\r\n}\r\n\r\nexport default Array;","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\Nav\\index.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\useWindow.js",["95","96"],"import React, {useState, useEffect} from 'react';\r\nfunction useWindowSize() {\r\n    const [size, setSize] = useState([0,0]);\r\n    const [deviceSize, setDeviceSize] = useState([0,0]);\r\n    useEffect(() => {\r\n      function updateSize() {\r\n          setSize([window.innerWidth, window.innerHeight]);\r\n          setDeviceSize([window.screen.width, window.screen.height]);\r\n        \r\n      }\r\n      window.addEventListener('resize', updateSize);\r\n      updateSize();\r\n      \r\n      return () => window.removeEventListener('resize', updateSize);\r\n    }, []);\r\n    return size;\r\n  }\r\n\r\n  export default useWindowSize;","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Tree.js",["97","98","99"],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\treeObj.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\TreeDraw.js",["100","101","102"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst TreeDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    //const [width, height] = useWindow();\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight; \r\n    console.log(width, height);\r\n    let stW = 900;\r\n    let stH = 900;\r\n    let ratio = stW/stH; \r\n    let x, y, w, h, r\r\n    let colors = [\"red\", \"deepskyblue\", \"lime\", \"mediumpurple\", \"yellow\", \"salmon\", \"white\", \"white\"];\r\n    const draw = ctx => { \r\n        x = width/2;\r\n        y = 0.1*height;\r\n        w = width * (200/stW);\r\n        h = height * (150/stH);\r\n        r = width*(20/stW);\r\n       \r\n        const H = h;\r\n        const W = w; \r\n        const R = r; \r\n        ctx.fillStyle = '#000000';\r\n        let root = props.data.root;\r\n        let counter = 1;\r\n        const treeDraw = (subroot, xC, yC) => {\r\n            let w, h, r;\r\n            w = W;\r\n            h = H;\r\n            r = R; \r\n            if(counter < 5) {\r\n                if(width >= 768 && height >= 998){\r\n                    ctx.font = \"1.5vh Impact\";\r\n                }\r\n                else if(width >= 768){\r\n                    ctx.font = \"2.5vh Impact\";\r\n                }\r\n                else{\r\n                    ctx.font = \"2vh Impact\";\r\n                }\r\n            }\r\n            else{\r\n                if(width >= 768 && height >= 998){\r\n                    ctx.font = \"1.1vh Impact\";\r\n                    r = 0.5*r;\r\n                }\r\n                else if(width >= 768){\r\n                    ctx.font = \"2vh Impact\";\r\n                    r= 0.5*r;\r\n                }\r\n                else{\r\n                    ctx.font = \"1.3vh Impact\";\r\n                    r = 0.75*r;\r\n                }\r\n                \r\n            }\r\n            ctx.beginPath();\r\n            ctx.arc(xC, yC, r, 0*Math.PI, 2*Math.PI);\r\n            ctx.fillStyle = colors[counter-1];\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillStyle = \"black\";\r\n            ctx.fillText(subroot.val, xC, yC);\r\n            if(subroot.left) {\r\n                w= W/counter; \r\n                let m = -h/w;\r\n                let c = -m*xC + yC;        \r\n                let aQ = Math.pow(m, 2) + 1;\r\n                let bQ = -2*(xC + m*yC - m*c);\r\n                let cQ = xC*xC + yC*yC + c*c - r*r - 2*c*yC;\r\n                let xQ1 = (-bQ - Math.sqrt(bQ*bQ - 4*aQ*cQ))/(2*aQ);\r\n                let xQ2 = (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ))/(2*aQ);\r\n                if(counter >= 4) {\r\n                    cQ = xC*xC + yC*yC + c*c - R*R - 2*c*yC;\r\n                    let cQ2 = xC*xC + yC*yC + c*c - r*r/4 - 2*c*yC\r\n                    xQ2 =  (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ2))/(2*aQ);\r\n                }\r\n                let xS = xQ1;\r\n                let yS = m*(xQ1) + c; // y = mx + c; \r\n                let xE = xQ2 - w;\r\n                let yE = m*(xQ2 - w) + c;\r\n                ctx.beginPath();\r\n                ctx.moveTo(xS, yS);\r\n                ctx.lineTo(xE, yE);\r\n                ctx.stroke();\r\n                counter++;\r\n                treeDraw(subroot.left, xC - w, yC + h);\r\n            }  \r\n            if(subroot.right) {\r\n            w = W/(counter);\r\n            let m = h/w;\r\n            let c = -m*xC + yC;  \r\n            let aQ = Math.pow(m, 2) + 1;\r\n            let bQ = -2*(xC + m*yC - m*c);\r\n            let cQ = xC*xC + yC*yC + c*c - r*r - 2*c*yC;\r\n            let xQ1 = (-bQ - Math.sqrt(bQ*bQ - 4*aQ*cQ))/(2*aQ);\r\n            let xQ2 = (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ))/(2*aQ);\r\n            if(counter >= 4) {\r\n                cQ = xC*xC + yC*yC + c*c - R*R - 2*c*yC;\r\n                let cQ2 = xC*xC + yC*yC + c*c - r*r/4 - 2*c*yC\r\n                xQ1 =  (-bQ + Math.sqrt(Math.pow(bQ, 2) - 4*aQ*cQ2))/(2*aQ);\r\n            }\r\n            let xS = xQ2;\r\n            let yS = m*(xQ2) + c; // y = mx + c; \r\n            let xE = xQ1 + w;\r\n            let yE = m*(xQ1 +  w) + c;\r\n            ctx.beginPath();\r\n            ctx.moveTo(xS, yS);\r\n            ctx.lineTo(xE, yE);\r\n            ctx.stroke();\r\n            counter++;\r\n            treeDraw(subroot.right, xC + w, yC + h);\r\n            }\r\n            counter--;\r\n        }\r\n            treeDraw(root, x, y);\r\n    }\r\n        \r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        canvas.width = ratio * width;\r\n        canvas.height = height*1200/stH;\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n    return ( <canvas className = \"canvas\" ref = {canvasRef} {...props} />)\r\n    \r\n\r\n}\r\n\r\n\r\nexport default TreeDraw; ","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\balancedTree.js",[],"C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Stack.js",["103","104","105","106"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport StackDraw from '../components/StackDraw'\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\n\r\n\r\nconst Stack = () => {\r\n    let arrSource = [];\r\n    for(let i = 0; i < 10; i++) {\r\n        arrSource.push(Math.floor(Math.random() *20));\r\n    }\r\n    const [method, setMethod] = useState(\"push\");\r\n    const [arr, setArr] = useState(arrSource);\r\n    const [formData, setFormData] = useState(\" \");\r\n    const [insFormData, setInsFormData] = useState({index: null, value: null})\r\n    // Menu for selecting method\r\n    const handlePush = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"push\");\r\n    }\r\n    const handlePop = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"pop\");\r\n    }\r\n    \r\n    // Methods for array mutation\r\n    //PUSH:\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\" \");\r\n    }\r\n    const handleEnterPush = (e) => {\r\n        e.preventDefault();\r\n        setArr([...arr, formData]);\r\n        setFormData(\"\");\r\n        \r\n    }\r\n    //POP: \r\n    const handleEnterPop = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.pop();\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n    }\r\n   \r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"arr: \", arr);\r\n        console.log(\"insformData\", insFormData);\r\n    },[arr, formData, , insFormData, method])\r\n    \r\n\r\n\r\n    return (\r\n        <div className = \"px-2 py-3\" >\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <h1 className = \"hdr\">STACKS</h1>\r\n            </div>\r\n            <div className = \"row no-gutters justify-content-center\" >\r\n                <img className = \"rounded img-hdr img-fluid\" src = \"https://images.crateandbarrel.com/is/image/Crate/LoganStackingDinnerPlateWhiteS8SHF15\"/>\r\n            </div>\r\n            <div className = \"row no-gutters justify-content-center\">\r\n                <p className = \"pt-2 px-1 pt-md-3 px-md-5\">The Stack operates on the Last In First Out (LIFO) principle. \r\n                This is analagous to a stack of dishes where the last plate put on the top of the stack is the first \r\n                plate to be used later. They are useful for converting infix expressions to postfix, backtracking \r\n                algorithms, and many other functions.</p>\r\n                <p className = \"p-1 px-md-5\">The push and pop methods are typically O(1) in Javascript. Worst case occurs when \r\n                size boundaries are encountered and the array needs to be copied to different sized array to \r\n                accomodate for change which is O(n) time. \r\n                In C, both functions are O(1) time if implementing the stack using a fixed size array. Worst case can be O(n) if dynamically allocating memory and run out of space. If using a linked list, the \r\n                list should be flipped so the start is the top of the stack to make push and pop O(1) time rather than traversing \r\n                to the end of the list which is O(n) time.  </p>\r\n            </div>\r\n            <div className = \"row no-gutters\" >\r\n                <div className = \"col-md-4\">\r\n                </div>\r\n                <div className = \" col-6 col-md-3 justify-content-md-end\">\r\n                    <Button color = \"success\" className = \"btn float-md-right\" onClick = {handlePush}> Push</Button>\r\n                    <Button color = \"warning\" className = \"btn float-md-right\" onClick = {handlePop}> Pop</Button>\r\n                    {(method === \"push\") && (\r\n                    <Form className = \"form float-md-right\">\r\n                        <Label>Value to push: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                        <Button className = \"btn enterBtn stkComp\" color = \"dark\" onClick = {handleEnterPush}>ENTER</Button>\r\n                    </Form>\r\n                    )}\r\n                    {(method === \"pop\") &&\r\n                        <div className = \"float-md-right d-block\">\r\n                            <Label className = \"btnLabel m-1 d-block\">Press Enter to pop: </Label>\r\n                            <Button className = \"btn enterBtn m-1 d-block float-right\" color = \"dark\" onClick = {handleEnterPop}>ENTER</Button>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <div className = \"col-6 col-md-2 justify-content-md-start\">\r\n                    <StackDraw data = {arr} />\r\n                </div>\r\n                <div className = \"col-md-3\">\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Stack;","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\StackDraw.js",["107","108","109"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst StackDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n      if(width >= 768 && height > 998) {\r\n        x = width/50;\r\n        y = height/50;\r\n        w = width/8;\r\n        h = height/25;\r\n    }\r\n    else if(width >= 768){\r\n    x = width/50;\r\n    y = height/50;\r\n    w = width/25;\r\n    h = width/20;\r\n    }\r\n    else if(width < 768 && width > 540){\r\n        x = width/50;\r\n        y = height/50;\r\n        w = width/10;\r\n        h = width/15;\r\n        }\r\n    else{\r\n    x = width/20;\r\n    y = height/50;\r\n    w = width/6;\r\n    h = width/10;    \r\n    }\r\n        ctx.fillStyle = '#000000';\r\n      if(height >= 998) {\r\n        ctx.font = \"18px Arial\";\r\n      }\r\n      else if (height < 998 && height >= 540) {\r\n          ctx.font = \"16px Arial\";\r\n      }\r\n      else {\r\n          ctx.font = \"12px Arial\";\r\n      }\r\n        for(var i = props.data.length - 1; i >= 0; i--) {\r\n            let opp = props.data.length - 1 - i; \r\n            ctx.beginPath();\r\n            ctx.rect(x, y + opp*h, w, h);\r\n            if(i === props.data.length - 1) {\r\n              ctx.fillStyle = \"gold\";\r\n              ctx.fill();\r\n            }\r\n            else{\r\n              ctx.fillStyle = \"white\";\r\n              ctx.fill();\r\n            }\r\n            ctx.stroke();\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillStyle = \"black\";\r\n            ctx.fillText(props.data[i], x + 0.5*w, y + 0.5*h + opp*h);\r\n            ctx.fillText(i, 0.5*x, y + 0.5*h + opp*h);\r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        canvas.width = 0.3*window.innerWidth;\r\n        canvas.height = window.innerHeight*2;\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas stkCanvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default StackDraw; ","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\Queue.js",["110","111","112","113"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport QueueDraw from '../components/QueueDraw'\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\n\r\n\r\nconst Queue = () => {\r\n    let arrSource = [];\r\n    for(let i = 0; i < 10; i++) {\r\n        arrSource.push(Math.floor(Math.random() *20));\r\n    }\r\n    const [method, setMethod] = useState(\"enQ\");\r\n    const [arr, setArr] = useState(arrSource);\r\n    const [formData, setFormData] = useState(\" \");\r\n    const [insFormData, setInsFormData] = useState({index: null, value: null})\r\n    // Menu for selecting method\r\n    const handleEQ = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"enQ\");\r\n    }\r\n    const handleDQ = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"dQ\");\r\n    }\r\n    \r\n    // Methods for array mutation\r\n    //Enqueue:\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\" \");\r\n    }\r\n    const handleEnterEQ = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.unshift(formData);\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n        \r\n    }\r\n    //Dequeue: \r\n    const handleEnterDQ = (e) => {\r\n        e.preventDefault();\r\n        let temp = arr;\r\n        temp.pop();\r\n        setArr([...temp]);\r\n        setFormData(\"\");\r\n    }\r\n   \r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"arr: \", arr);\r\n        console.log(\"insformData\", insFormData);\r\n    },[arr, formData, , insFormData, method])\r\n    \r\n\r\n\r\n    return (\r\n        <div className = \"px-2 py-3\" >\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <h1 className = \"hdr\">Queue</h1>\r\n            </div>\r\n            <div className = \"row no-gutters justify-content-center\" >\r\n                <img className = \"rounded img-hdr img-fluid\" src = \"https://img.freepik.com/free-vector/people-line-waiting-pay_23-2148206445.jpg?size=626&ext=jpg\"/>\r\n            </div>\r\n            <div className = \"row no-gutters justify-content-center\">\r\n                <p className = \"pt-2 px-1 pt-md-3 px-md-5\">The Queue operates on the First In First Out (FIFO) principle.\r\n                Queues may be implemented using linked lists or arrays. Queues have two operations, enqueue and dequeue. Enqueue adds data to the \r\n                back while dequeue removes and returns the data at the front of the structure. \r\n                There are also other ways to implement the queue such as the \r\n                circular buffer (circular queue), priority queues, and dequeues.\r\n                </p>\r\n                <p>There are several draw backs with the implementation of a queue as an array. Enqueueing is O(n) time because everything needs to be shifted in the array. This \r\n                    can be avoided by tracking the first occupied index in the array, but empty indices will be left in the beginning of the array. The linked list implementation can allow for O(1) enqueue and dequeue operations. If it is singly linked, a pointer at the end \r\n                    must be maintained for O(1) dequeueing. If it is doubly linked list, no modifications are necessary for constant time operations. \r\n                </p>\r\n                <ol>Variations\r\n                    <li>Circular buffer - Data is kept in an array with a  front and rear pointer. Data is not removed, instead the data between the front (including) and rear (excluding) pointers define the state of the queue. When they are equal, the queue is empty. When tail is one behind the head it is full. When the pointers get to the end of the array, they have to be set to the other end of the array, imitating a circle.  This is useful in cyclical functions.</li>\r\n                    <li>Priority queue - Data entries have a priority associated with them. The entry with the highest priority will be enqueued next. If priority levels are the same, the FIFO principle is maintained.</li>\r\n                    <li>Deque- Double ended queue that allows for enqueue and dequeue operations at either side. This structure provides many forms of implementation as it may be used as a stack, queue, or hybrid of the two. It allows for O(1) enqueue and dequeue operations at either side. </li>\r\n                </ol>\r\n                <p className = \"p-1 px-md-5\">  </p>\r\n            </div>\r\n            \r\n                <Button color = \"danger\" className = \"btn\" onClick = {handleEQ}>Enqueue</Button>\r\n                <Button color = \"success\" className = \"btn\" onClick = {handleDQ}>Dequeue</Button>\r\n                <div className = \"row no-gutters\" >\r\n                {(method === \"enQ\") && (\r\n                <Form className = \"form\">\r\n                    <Label>Value to enqueue: </Label>\r\n                    <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                    <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterEQ}>ENTER</Button>\r\n                </Form>\r\n                )}\r\n                {(method === \"dQ\") &&\r\n                    <div className = \"\">\r\n                        <Label className = \"btnLabel\">Press Enter to dequeue: </Label>\r\n                        <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterDQ}>ENTER</Button>\r\n                    </div>\r\n                }\r\n                <div className = \"row no-gutters justify-content-center p-md-3\">\r\n                    <QueueDraw data = {arr} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Queue;","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\QueueDraw.js",["114","115","116"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst QueueDraw = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    let x, y, w, h;\r\n    const draw = ctx => {\r\n        if(width >=  768 && height > 998) {\r\n            x = width/75;\r\n            y = height/50;\r\n            w = width/20;\r\n            h = width/10;\r\n        }\r\n        else if(width >= 768){\r\n        x = width/20;\r\n        y = height/50;\r\n        w = width/25;\r\n        h = width/15;\r\n        }\r\n        else{\r\n        x = width/20;\r\n        y = height/50;\r\n        w = width/16;\r\n        h = width/12;\r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        for(var i = props.data.length - 1; i >= 0; i--) {\r\n            let opp = props.data.length - 1 - i;\r\n            ctx.beginPath();\r\n            ctx.rect(x + opp*w, y, w, h);\r\n            if(i === props.data.length - 1){\r\n                ctx.fillStyle = \"green\";\r\n                ctx.fill();\r\n            }\r\n            else if(i === 0) {\r\n                ctx.fillStyle = \"red\";\r\n                ctx.fill();\r\n            }\r\n            else{\r\n                ctx.fillStyle = \"gold\";\r\n                ctx.fill();\r\n            }\r\n            ctx.stroke();\r\n            if(width >= 998) {\r\n                ctx.font = \"16px Arial\";\r\n            }\r\n            else if (width < 998 && width >= 540) {\r\n                ctx.font = \"14px Arial\";\r\n            }\r\n            else {\r\n                ctx.font = \"11px Arial\";\r\n            }\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillStyle = \"black\";\r\n            ctx.fillText(props.data[i], x + 0.5*w + opp*w, y + 0.5*h);\r\n            if(i === props.data.length - 1){\r\n                ctx.fillText(\"FIRST\", x + 0.5*w + opp*w, y + 1.3*h);\r\n            }\r\n            else if(i === 0) {\r\n                ctx.fillText(\"LAST\", x + 0.5*w + opp*w, y + 1.3*h);\r\n            }\r\n            \r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        \r\n        if(width > 996 & height < 996)  {\r\n            canvas.height = window.innerHeight;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width >= 768 & height >= 768)  {\r\n            canvas.height = window.innerHeight;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width < 996 & height > 996)  {\r\n            canvas.height = window.innerHeight*0.08;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width < 540) {\r\n            canvas.height = window.innerHeight*.25;\r\n            canvas.width = 3*window.innerWidth;\r\n        }\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default QueueDraw; ","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\pages\\LinkedListS.js",["117","118"],"import React, {useState, useEffect, useRef} from 'react';\r\nimport {Button, Form, Input, Label} from \"reactstrap\";\r\nimport \"../Style.css\";\r\nimport List from \"../utils/sLinkedList\";\r\nimport ListDrawS from '../components/ListDrawS';\r\n\r\nvar listSrc = new List();\r\nfor(let i = 0; i < 10; i++) {\r\n    listSrc.prepend(Math.floor(Math.random()*20));\r\n}\r\nfunction LinkedListS (props)  {\r\n    const [method, setMethod] = useState(\"prepend\");\r\n    const [list, setList] = useState(listSrc.list);\r\n    const [formData, setFormData] = useState(\"\");\r\n    const [insFormData, setInsFormData] = useState({index: \"\", value: \"\"})\r\n    // Menu for selecting method\r\n    const handleAppend = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"append\");\r\n    }\r\n    const handlePrepend = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"prepend\");\r\n    }\r\n    const handleInsert = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"insert\");\r\n    }\r\n    const handleDelete = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"delete\");\r\n    }\r\n    const handleDelF = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"delF\");\r\n    }\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        setMethod(\"update\");\r\n    }\r\n    // Methods for array mutation\r\n    //Change for push, unshift\r\n    const handleChange = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setFormData(e.target.value) : setFormData(\"\");\r\n        \r\n    }\r\n    //Append\r\n    const handleEnterAppend = (e) => {\r\n        e.preventDefault();\r\n        if(formData){\r\n            listSrc.append(formData);\r\n            setList({...listSrc.list});\r\n            setFormData(\"\");\r\n        }\r\n        else {\r\n            setFormData(\"Invalid Entry\")\r\n        }\r\n        \r\n    }\r\n    //PRepend: \r\n    const handleEnterPrepend = (e) => {\r\n        e.preventDefault();\r\n        if(formData){\r\n            listSrc.prepend(formData);\r\n            setList({...listSrc.list});\r\n            setFormData(\"\");\r\n        }\r\n        else {\r\n            setFormData(\"Invalid Entry\")\r\n        }\r\n    }\r\n    // INSERT: \r\n    const handleChangeI = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, index: Number(e.target.value)}) : setInsFormData({...insFormData, index: \" \"});\r\n    }\r\n    const handleChangeV = (e) => {\r\n        e.preventDefault();\r\n        e.target.value ? setInsFormData({...insFormData, value: Number(e.target.value)}) : setInsFormData({...insFormData, value: \" \"});\r\n    }\r\n    const handleEnterIns = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData.index >= 0 && insFormData.index <= list.length){\r\n            listSrc.insert(insFormData.index, insFormData.value);\r\n            setList({...listSrc.list});\r\n            setInsFormData({index: \"\", value: \"\"});\r\n        }\r\n        else {\r\n            setInsFormData({...insFormData, index: \"Invalid Entry\", value: \"\"})\r\n        }\r\n    }\r\n    // DELETE\r\n    \r\n    const handleEnterDelete = (e) => {\r\n        e.preventDefault();\r\n        if(formData){\r\n            if(formData >= 0 && formData < list.length){\r\n                listSrc.delete(formData);\r\n                setList({...listSrc.list});\r\n                setFormData(\"\");\r\n            }\r\n            else {\r\n                setFormData(\"INV!\")\r\n            }\r\n        }\r\n    }\r\n    // Delete first node\r\n    const handleEnterDelF = (e) => {\r\n        e.preventDefault();\r\n            listSrc.delF();\r\n            setList({...listSrc.list});\r\n            setFormData(\"\");\r\n    }\r\n\r\n    //Update\r\n    const handleEnterUpdate = (e) => {\r\n        e.preventDefault();\r\n        if(insFormData.index >= 0 && insFormData.index < list.length){\r\n            console.log(Number(insFormData.index))\r\n            listSrc.update(insFormData.index, insFormData.value);\r\n            setList({...listSrc.list});\r\n            setInsFormData({index: \"\", value: \"\"});\r\n        }\r\n        \r\n        else {\r\n            setInsFormData({...insFormData, index: \"Invalid Entry\", value: \"\"})\r\n        }\r\n}\r\n// THIS IS OUR TEST UNIT\r\n    useEffect(()=> {\r\n        console.log(\"list: \", list);\r\n        console.log(\"insformData\", insFormData);\r\n    },[list, formData, , insFormData, method])\r\n    \r\n\r\n\r\n    return (\r\n        <div className = \"pt-2 p-1 px-md-5 py-md-3\">\r\n            <div className = \"row no-gutters justify-content-center p-3\">\r\n                <h1 className = \"hdr\">LINKED LISTS</h1>\r\n            </div>\r\n            <ListDrawS data = {list} />\r\n            <Button color = \"success\" className = \"btn\" onClick = {handlePrepend}>Prepend</Button>\r\n            <Button color = \"primary\" className = \"btn\" onClick = {handleDelF}> Delete First Node</Button>\r\n            <Button color = \"info\" className = \"btn\" onClick = {handleInsert}> Insert</Button>\r\n            <Button color = \"danger\" className = \"btn\" onClick = {handleDelete}> Delete</Button>\r\n            <Button color = \"secondary\" className = \"btn\" onClick = {handleAppend}>Append</Button>\r\n            <Button color = \"success\" className = \"btn\" onClick = {handleUpdate}> Update</Button>\r\n            \r\n            {(method === \"prepend\") && (\r\n            <Form className = \"form\" onSubmit = {handleEnterPrepend}>\r\n                <Label>Value to prepend: </Label>\r\n                <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterPrepend}>ENTER</Button>\r\n            </Form>\r\n            )}\r\n            {(method === \"delF\") &&\r\n                <div>\r\n                    <Label className = \"btnLabel m-1\">Press Enter to delete first node: </Label>\r\n                    <Button className = \"btn enterBtn m-1\" color = \"dark\" onClick = {handleEnterDelF}>ENTER</Button>\r\n                </div>\r\n            }\r\n            {(method === \"insert\") &&\r\n                <div>\r\n                <Form className = \"form\" onSubmit = {handleEnterIns}>\r\n                    <Label className=\"btnLabel\">Index to Insert: </Label>\r\n                    <Input onChange = {handleChangeI} value = {insFormData.index} type = \"number\"></Input>\r\n                    <Label>Value to Insert: </Label>\r\n                    <Input className = \"input\" onChange = {handleChangeV} value = {insFormData.value} type = \"number\"></Input>\r\n                <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterIns}>ENTER</Button>\r\n                </Form>\r\n                </div>\r\n            }\r\n            {(method === \"delete\") &&\r\n                <div>\r\n                    <Form className = \"form\" onSubmit = {handleEnterDelete}>\r\n                        <Label className=\"btnLabel\">Index to Delete: </Label>\r\n                        <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                        <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterDelete}>ENTER</Button>\r\n                    </Form>  \r\n                </div>\r\n            }\r\n            {(method === \"append\") &&\r\n                <div className = \"justify-content-center\">\r\n                    <Label className = \"btnLabel m-1 \">Press Enter to append: </Label>\r\n                    <Input className = \"input\" onChange = {handleChange} value = {formData} type = \"number\"></Input>\r\n                    <Button className = \"btn enterBtn m-1\" color = \"dark\" onClick = {handleEnterAppend}>ENTER</Button>\r\n                </div>\r\n            }\r\n            {(method === \"update\") &&\r\n                <div>\r\n                    <Form className = \"form\" onSubmit = {handleEnterUpdate}>\r\n                        <Label className=\"btnLabel\">Index to Update: </Label>\r\n                        <Input onChange = {handleChangeI} value = {insFormData.index} type = \"number\"></Input>\r\n                        <Label>Updated value: </Label>\r\n                        <Input className = \"input\" onChange = {handleChangeV} value = {insFormData.value} type = \"number\"></Input>\r\n                        <Button className = \"btn enterBtn\" color = \"dark\" onClick = {handleEnterUpdate}>ENTER</Button>\r\n                    </Form>\r\n                </div>\r\n            }\r\n            <div className = \"row no-gutters\">\r\n                <p>Linked Lists are linear data structures where nodes are joined together with pointers. They can be singly or doubly linked. In a singly\r\n                    linked list, nodes only have pointers to the next node while doubly linked lists have pointers to both the\r\n                    previous and next node. Singly linked lists use less memory because each node has just one pointer, but doubly linked lists allow for bi-directional\r\n                    traversal which is more efficient for accessing data towards the end of the list. In both lists, accessing the first node is O(1) time,\r\n                    but in a singly linked list, accessing data towards the end of this list is roughly O(n) time due to traversing from the first node.\r\n                    In a doubly linked list, pointers can be placed at the front and end of the list, so it is O(1) time to access the first and last nodes. It is also possible\r\n                    to link the rear of the list to the front to create a circular linked list. This can be implemented on singly and doubly linked lists. Circular lists can be implemented\r\n                    without any pointers to null which means less edge cases. It can be difficult to know which part of the list is being referenced with the circular implementation.\r\n                </p>\r\n                <p>Linked lists and arrays are both linear data structures but they have certain pros and cons. \r\n                    In lower level languages like C, Linked lists are dynamic so memory can be allocated in run time to create a list of any size  (unless heap is full). They can also store non-primitive data types.\r\n                    Linked lists require more memory than arrays because of the extra space required for two pointers in each node.  \r\n                    Arrays are of a fixed size, and store primitive data types only, but they do provide O(1) random access when extracting data at a specified index. Linked lists \r\n                    require sequential access meaning the list needs to be traversed until the node is found with the correct data (worst case O(n)).\r\n                    Linked lists are more efficient at insert and delete operations because all of the data does not need to be shifted, and removed nodes are freed from memory.\r\n                    </p>\r\n                <ol> <strong>List of Linked List Operations </strong>\r\n                    <li>Prepend- inserts new node at beginning of list</li>\r\n                    <li>Append - insert new node at end of list</li>\r\n                    <li>Insert -  inserts new node at a specified node in the list</li>\r\n                    <li>Delete - deletes a node at a specified node in the list</li>\r\n                    <li>Update - data is updated in a specified node</li>\r\n                    <li>Search - locates a specified piece of data and returns it</li>\r\n                </ol>\r\n                <p>This linked list was created in Javascript by creating an object (node) that has a value property and one other property that points to the \r\n                        next node in the list. Objects are often (depending on the engine implementation) created in the heap memory in Javascript which means they are called by reference.\r\n                        If using C/C++, memory needs to be manually dynamicaly allocated in the heap. Nodes would be created in the heap that point to the next node, chaining a series of nodes. When accessing information from the linked list, a pointer to the address of the front node must be maintained.\r\n                        This memory must be manually released to avoid memory leaks. \r\n                    </p>\r\n            </div>\r\n        </div> \r\n        \r\n    )\r\n\r\n}\r\n\r\nexport default LinkedListS;","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\components\\ListDrawS.js",["119","120","121"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport \"../Style.css\";\r\nimport useWindow from \"../utils/useWindow\";\r\n\r\nconst ListDrawS = (props) => {\r\n    const canvasRef = useRef(null);\r\n    const width = window.innerWidth;\r\n    const height = window.innerHeight;\r\n    let x, y, w, h, lw, al;\r\n    let arrowAng = 20 * Math.PI/180;\r\n    const draw = ctx => {\r\n        // Ipad\r\n        if(width >= 768 && height > 998) {\r\n            x = width/300;\r\n            y = height/50;\r\n            w = width/20;\r\n            h = width/25;\r\n            lw = width/50;\r\n            al = 12;\r\n        }\r\n        else if(width >= 768){\r\n        x = width/300;\r\n        y = height/50;\r\n        w = width/40;\r\n        h = width/40;\r\n        lw = width/50;\r\n        al = 12;\r\n        }\r\n        else if(width < 768 && width > 540){\r\n            x = width/150;\r\n            y = height/50;\r\n            w = width/35;\r\n            h = width/25;\r\n            lw = width/30;\r\n            al = 123;\r\n            }\r\n        else{\r\n        x = width/20;\r\n        y = height/50;\r\n        w = width/12;\r\n        h = width/12;\r\n        lw = width/28;\r\n        al = 5;\r\n        \r\n        }\r\n        ctx.fillStyle = '#000000';\r\n        let p = props.data.front;\r\n        console.log(props.data);\r\n        let i = 0;\r\n        while(p) {\r\n            ctx.beginPath();\r\n            ctx.fillStyle = \"orange\";\r\n            ctx.rect(x + i*w + i*lw, y, w, h);\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            ctx.beginPath();\r\n            ctx.fillStyle = \"blue\";\r\n            ctx.rect(x + i*w + i*lw, y + h, w, h);\r\n            ctx.fill();\r\n            ctx.stroke();\r\n            if(p.next) {\r\n                ctx.beginPath();\r\n                ctx.moveTo(x + w + i*(w + lw), y + 1.5*h); \r\n                ctx.lineTo(x + w + i*(w + lw) + lw, y + 1.5*h);\r\n                ctx.moveTo(x + w + i*(w + lw) + lw, y + 1.5*h);\r\n                ctx.lineTo(x + w + i*(w + lw) + lw - al*Math.cos(arrowAng), y + 1.5*h + al*Math.sin(arrowAng));\r\n                ctx.moveTo(x + w + i*(w + lw) + lw, y + 1.5*h);\r\n                ctx.lineTo(x + w + i*(w + lw) + lw - al*Math.cos(arrowAng), y + 1.5*h - al*Math.sin(arrowAng));\r\n                ctx.stroke();\r\n            }\r\n            if(width >= 998) {\r\n                ctx.font = \"14px Arial\";\r\n            }\r\n            else if (width < 998 && width >= 540) {\r\n                ctx.font = \"12.5px Arial\";\r\n            }\r\n            else {\r\n                ctx.font = \"11px Arial\";\r\n            }\r\n            ctx.textAlign=\"center\"; \r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillStyle = \"black\";\r\n            ctx.fillText(p.val, x + 0.5*w + i*w + i*lw, y + 0.5*h);\r\n            ctx.fillStyle = \"white\";\r\n            ctx.fillText(\"*PTR\", x + 0.5*w + i*w + i*lw, y + 1.3*h);\r\n            ctx.fillStyle = \"black\";\r\n            ctx.fillText(i, x + 0.5*w + i*w + i*lw, y + 2.3*h); \r\n            i===0 && ctx.fillText(\"FRONT\", x + 0.65*w + i*w + i*lw, y + 3*h);\r\n            p = p.next;\r\n            i++;\r\n        }\r\n        \r\n      }\r\n      \r\n      useEffect(() => {\r\n        \r\n        const canvas = canvasRef.current;\r\n        const context = canvas.getContext('2d');\r\n        \r\n        if(width > 996 && height < 996)  {\r\n            canvas.height = window.innerHeight*0.3;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width > 996 && height > 996)  {\r\n            canvas.height = window.innerHeight*0.15;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width < 996 && height > 996)  {\r\n            canvas.height = window.innerHeight*0.15;\r\n            canvas.width = 2*window.innerWidth;\r\n        }\r\n        else if(width < 540) {\r\n            canvas.height = window.innerHeight*.3;\r\n            canvas.width = 3*window.innerWidth;\r\n        }\r\n        context.clearRect(0, 0, canvas.width, canvas.height);\r\n        draw(context);\r\n      }, [draw]);\r\n    \r\n\r\n        return ( <canvas className = \"canvas\" ref = {canvasRef} {...props} />)\r\n    }\r\n\r\n\r\nexport default ListDrawS; ","C:\\Users\\johnj\\Documents\\UT Coding Bootcamp\\Post-grad projects\\DataStruct\\data-struct\\src\\utils\\sLinkedList.js",["122","123"],"import React from \"react\";\r\n\r\nfunction Node(val) {\r\n    //val ? this.val = val : this.val = null;\r\n    this.val = val;\r\n    this.next = null;\r\n}\r\nfunction sLinkedList () {\r\n    this.list = {};\r\n    this.list.front = null;\r\n    this.list.rear = null;\r\n    this.list.length = 0;\r\n}\r\n\r\nsLinkedList.prototype.prepend = function (val) {\r\n    let q = new Node(val);\r\n    if(!this.list.front) {\r\n        this.list.front = q;\r\n        this.list.rear = q;\r\n        console.log(\"p1\", this.list)\r\n    }\r\n    else {\r\n        q.next = this.list.front;\r\n        this.list.front = q;\r\n        console.log(\"p2\", this.list)\r\n    }\r\n    this.list.length++;\r\n}\r\nsLinkedList.prototype.append = function (val) {\r\n    let q = new Node(val);\r\n    console.log(\"q ap\", q)\r\n    if(!this.list.front){\r\n        this.list.front = q;\r\n        this.list.rear = q;\r\n        console.log(\"ap1\", this.list)\r\n    }\r\n    else {\r\n        this.list.rear.next = q;\r\n        this.list.rear = q; \r\n        console.log(\"ap2\", this.list)\r\n    }\r\n    this.list.length++;\r\n}\r\n\r\nsLinkedList.prototype.delF = function (val) {\r\n    if(this.list.front){\r\n        let p = this.list.front;\r\n        if(this.list.front.next) {\r\n            this.list.front = this.list.front.next;\r\n            this.list.length--;\r\n        }\r\n        else{\r\n            this.list.front = null;\r\n            this.list.length--;\r\n        }\r\n    }\r\n}\r\nsLinkedList.prototype.insert = function (index, val) {\r\n    let p = this.list.front;\r\n    let count = 0;\r\n    if(index === 0) {\r\n        this.prepend(val);\r\n    }\r\n    else if(index === this.list.length) {\r\n        this.append(val);\r\n    }\r\n    else {\r\n    while(p.next) {\r\n        if(count === index - 1){\r\n            let q = new Node(val);\r\n            q.next = p.next;\r\n            p.next = q;\r\n            this.list.length++;\r\n            break;\r\n        }\r\n        p = p.next;\r\n        count++;\r\n       } \r\n}\r\n}\r\n\r\nsLinkedList.prototype.delete = function (index) {\r\n    let p = this.list.front;\r\n    let count = 0;\r\n    if(index === 0) {\r\n        this.list.front = this.list.front.next; \r\n        this.delF();\r\n    }\r\n    \r\n    while(p.next) {\r\n        if(count === this.list.length - 2) {\r\n            p.next = null;\r\n            this.list.length--;\r\n            return;\r\n        }\r\n        if(count === index - 1){\r\n            let q = p.next;\r\n            p.next = q.next;\r\n            q.next = null; // q goes to garbage collection\r\n            this.list.length--;\r\n            return;\r\n        }\r\n        p = p.next;\r\n        count++;\r\n    } \r\n}\r\n\r\nsLinkedList.prototype.update = function (index, val) {\r\n    let p = this.list.front;\r\n    let count = 0;\r\n    console.log(\"IN THE WORKS UPDATE\")\r\n    while(p) {\r\n        if(count === index) {\r\n            p.val = val; \r\n            return;\r\n        }\r\n        p = p.next;\r\n        count++;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default sLinkedList;",{"ruleId":"124","replacedBy":"125"},{"ruleId":"126","replacedBy":"127"},{"ruleId":"128","severity":1,"message":"129","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":18},{"ruleId":"128","severity":1,"message":"132","line":4,"column":7,"nodeType":"130","messageId":"131","endLine":4,"endColumn":12},{"ruleId":"128","severity":1,"message":"133","line":1,"column":24,"nodeType":"130","messageId":"131","endLine":1,"endColumn":32},{"ruleId":"128","severity":1,"message":"134","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":17},{"ruleId":"135","severity":1,"message":"136","line":74,"column":10,"nodeType":"137","endLine":74,"endColumn":16,"suggestions":"138"},{"ruleId":"128","severity":1,"message":"139","line":1,"column":37,"nodeType":"130","messageId":"131","endLine":1,"endColumn":43},{"ruleId":"140","severity":1,"message":"141","line":121,"column":7,"nodeType":"137","messageId":"142","endLine":121,"endColumn":45},{"ruleId":"128","severity":1,"message":"143","line":1,"column":8,"nodeType":"130","messageId":"131","endLine":1,"endColumn":13},{"ruleId":"128","severity":1,"message":"144","line":4,"column":12,"nodeType":"130","messageId":"131","endLine":4,"endColumn":22},{"ruleId":"128","severity":1,"message":"139","line":1,"column":37,"nodeType":"130","messageId":"131","endLine":1,"endColumn":43},{"ruleId":"128","severity":1,"message":"145","line":5,"column":8,"nodeType":"130","messageId":"131","endLine":5,"endColumn":17},{"ruleId":"146","severity":1,"message":"147","line":74,"column":17,"nodeType":"148","endLine":74,"endColumn":189},{"ruleId":"128","severity":1,"message":"133","line":1,"column":24,"nodeType":"130","messageId":"131","endLine":1,"endColumn":32},{"ruleId":"128","severity":1,"message":"134","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":17},{"ruleId":"135","severity":1,"message":"149","line":133,"column":10,"nodeType":"137","endLine":133,"endColumn":16,"suggestions":"150"},{"ruleId":"128","severity":1,"message":"139","line":1,"column":37,"nodeType":"130","messageId":"131","endLine":1,"endColumn":43},{"ruleId":"128","severity":1,"message":"151","line":15,"column":25,"nodeType":"130","messageId":"131","endLine":15,"endColumn":39},{"ruleId":"140","severity":1,"message":"141","line":51,"column":7,"nodeType":"137","messageId":"142","endLine":51,"endColumn":45},{"ruleId":"146","severity":1,"message":"147","line":61,"column":17,"nodeType":"148","endLine":61,"endColumn":157},{"ruleId":"128","severity":1,"message":"133","line":1,"column":24,"nodeType":"130","messageId":"131","endLine":1,"endColumn":32},{"ruleId":"128","severity":1,"message":"134","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":17},{"ruleId":"135","severity":1,"message":"152","line":10,"column":11,"nodeType":"153","endLine":65,"endColumn":8},{"ruleId":"128","severity":1,"message":"139","line":1,"column":37,"nodeType":"130","messageId":"131","endLine":1,"endColumn":43},{"ruleId":"128","severity":1,"message":"151","line":15,"column":25,"nodeType":"130","messageId":"131","endLine":15,"endColumn":39},{"ruleId":"140","severity":1,"message":"141","line":53,"column":7,"nodeType":"137","messageId":"142","endLine":53,"endColumn":45},{"ruleId":"146","severity":1,"message":"147","line":63,"column":17,"nodeType":"148","endLine":63,"endColumn":166},{"ruleId":"128","severity":1,"message":"133","line":1,"column":24,"nodeType":"130","messageId":"131","endLine":1,"endColumn":32},{"ruleId":"128","severity":1,"message":"134","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":17},{"ruleId":"135","severity":1,"message":"136","line":93,"column":10,"nodeType":"137","endLine":93,"endColumn":16,"suggestions":"154"},{"ruleId":"128","severity":1,"message":"139","line":1,"column":37,"nodeType":"130","messageId":"131","endLine":1,"endColumn":43},{"ruleId":"140","severity":1,"message":"141","line":134,"column":7,"nodeType":"137","messageId":"142","endLine":134,"endColumn":46},{"ruleId":"128","severity":1,"message":"133","line":1,"column":24,"nodeType":"130","messageId":"131","endLine":1,"endColumn":32},{"ruleId":"128","severity":1,"message":"134","line":3,"column":8,"nodeType":"130","messageId":"131","endLine":3,"endColumn":17},{"ruleId":"135","severity":1,"message":"136","line":118,"column":10,"nodeType":"137","endLine":118,"endColumn":16,"suggestions":"155"},{"ruleId":"128","severity":1,"message":"143","line":1,"column":8,"nodeType":"130","messageId":"131","endLine":1,"endColumn":13},{"ruleId":"128","severity":1,"message":"156","line":47,"column":13,"nodeType":"130","messageId":"131","endLine":47,"endColumn":14},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-unused-vars","'Reactstrap' is defined but never used.","Identifier","unusedVar","'Array' is assigned a value but never used.","'useState' is defined but never used.","'useWindow' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'height' and 'width'. Either include them or remove the dependency array.","ArrayExpression",["159"],"'useRef' is defined but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'React' is defined but never used.","'deviceSize' is assigned a value but never used.","'TreeClass' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'height', 'ratio', 'stH', and 'width'. Either include them or remove the dependency array.",["160"],"'setInsFormData' is assigned a value but never used.","The 'draw' function makes the dependencies of useEffect Hook (at line 75) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","VariableDeclarator",["161"],["162"],"'p' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},{"desc":"163","fix":"167"},{"desc":"163","fix":"168"},"Update the dependencies array to be: [draw, height, width]",{"range":"169","text":"170"},"Update the dependencies array to be: [draw, height, ratio, stH, width]",{"range":"171","text":"172"},{"range":"173","text":"170"},{"range":"174","text":"170"},[2382,2388],"[draw, height, width]",[4742,4748],"[draw, height, ratio, stH, width]",[2949,2955],[3945,3951]]